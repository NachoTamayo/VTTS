generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ForecastStatus {
  id                      BigInt                @id @default(autoincrement())
  status                  String                @unique
  description             String?
  forecastStatusRulesFrom ForecastStatusRules[] @relation("StatusFrom")
  forecastStatusRulesTo   ForecastStatusRules[] @relation("StatusTo")
  versionForecast         VersionForecast[]
}

model ForecastStatusRules {
  id         BigInt @id @default(autoincrement())
  statusFrom BigInt
  statusTo   BigInt

  statusFromRelation ForecastStatus @relation("StatusFrom", fields: [statusFrom], references: [id])
  statusToRelation   ForecastStatus @relation("StatusTo", fields: [statusTo], references: [id])

  @@unique([statusFrom, statusTo])
}

model RelatedSr {
  id        BigInt @id @default(autoincrement())
  srNumber1 BigInt
  srNumber2 BigInt
  linkedBy  BigInt

  srNumber1Relation ServiceRequest @relation("SrNumber1", fields: [srNumber1], references: [id])
  srNumber2Relation ServiceRequest @relation("SrNumber2", fields: [srNumber2], references: [id])
  linkedByRelation  VttsUser       @relation(fields: [linkedBy], references: [id])

  @@unique([srNumber1, srNumber2])
}

model ReleaseVersion {
  id             BigInt    @id @default(autoincrement())
  app            BigInt
  releaseVersion BigInt
  testDeadline   DateTime?
  stage          String

  appRelation   VttsSystem      @relation(fields: [app], references: [id])
  releaseSystem SystemVersion   @relation(fields: [releaseVersion], references: [id])
  testPssSystem TestPssSystem[]

  @@unique([app, releaseVersion, stage])
}

model Resolution {
  id             BigInt    @id @default(autoincrement())
  srNumber       BigInt
  assigned       BigInt
  resolutionDate DateTime?
  comments       String?

  srNumberRelation ServiceRequest @relation(fields: [srNumber], references: [id])
  assignedRelation VttsUser       @relation(fields: [assigned], references: [id])
}

model ServiceRequest {
  id           BigInt  @id @default(autoincrement())
  srType       BigInt
  srNumber     String  @unique
  description  String?
  externalLink String?
  dataTestPath String?
  trelloLink   String?
  lastTester   BigInt
  statusSr     String

  srTypeRelation     SrType   @relation(fields: [srType], references: [id])
  lastTesterRelation VttsUser @relation(fields: [lastTester], references: [id])

  testPssSystem   TestPssSystem[]
  versionForecast VersionForecast[]
  relatedSr1      RelatedSr[]       @relation("SrNumber1")
  relatedSr2      RelatedSr[]       @relation("SrNumber2")
  resolution      Resolution[]
}

model SrType {
  id          BigInt  @id @default(autoincrement())
  srType      String  @unique
  description String?

  serviceRequest ServiceRequest[]
  testPssSystem  TestPssSystem[]
}

model SystemVersion {
  id           BigInt    @id @default(autoincrement())
  app          BigInt
  version      String
  deliveryDate DateTime?

  appRelation    VttsSystem       @relation(fields: [app], references: [id])
  releaseVersion ReleaseVersion[]
  testPssSystem  TestPssSystem[]

  // Relación inversa hacia VersionForecast (sin fields ni references)
  versionForecast VersionForecast[]
}

model TestAttachedInfo {
  id              BigInt @id @default(autoincrement())
  idTestPssSystem BigInt
  fileName        String

  testPssSystemRelation TestPssSystem @relation(fields: [idTestPssSystem], references: [id])

  @@unique([idTestPssSystem, fileName])
}

model TestPssSystem {
  id               BigInt    @id @default(autoincrement())
  srType           BigInt
  srNumber         BigInt
  assigned         BigInt?
  status           BigInt?
  dateTest         DateTime?
  comments         String?
  dateModification DateTime?
  releaseNote      String?
  windchillComment String?
  app              BigInt
  releaseVersion   BigInt
  stage            BigInt

  srTypeRelation   SrType         @relation(fields: [srType], references: [id])
  srNumberRelation ServiceRequest @relation(fields: [srNumber], references: [id])
  assignedRelation VttsUser?      @relation(fields: [assigned], references: [id])
  statusRelation   TestStatus?    @relation(fields: [status], references: [id])
  appRelation      VttsSystem     @relation(fields: [app], references: [id])

  releaseVersionRelation SystemVersion @relation(fields: [releaseVersion], references: [id])

  testAttachedInfo TestAttachedInfo[]

  stageRelation ReleaseVersion @relation(fields: [stage], references: [id])

  @@unique([app, releaseVersion, srNumber, stage])
}

model TestStatus {
  id           BigInt  @id @default(autoincrement())
  idStatus     String  @unique
  descStatus   String?
  isFailed     String?
  displayOrder Int     @unique

  testPssSystem TestPssSystem[]
}

model VersionForecast {
  id               BigInt    @id @default(autoincrement())
  app              BigInt
  version          BigInt
  srNumber         BigInt
  dateModification DateTime?
  assigned         BigInt
  status           BigInt

  appRelation      VttsSystem     @relation(fields: [app], references: [id])
  versionRelation  SystemVersion  @relation(fields: [version], references: [id]) // Relación con SystemVersion
  srNumberRelation ServiceRequest @relation(fields: [srNumber], references: [id])
  assignedRelation VttsUser       @relation(fields: [assigned], references: [id])
  statusRelation   ForecastStatus @relation(fields: [status], references: [id])

  @@unique([app, version, srNumber])
}

model VttsSystem {
  id              BigInt  @id @default(autoincrement())
  app             String  @unique
  description     String?
  explorerVersion String?
  jreVersion      String?

  testPssSystem   TestPssSystem[]
  releaseVersion  ReleaseVersion[]
  systemVersion   SystemVersion[]
  versionForecast VersionForecast[]
}

model VttsUser {
  id               BigInt    @id @default(autoincrement())
  assigned         String    @unique
  userName         String?
  password         String?
  email            String?
  mailSign         String?
  dateModification DateTime?
  userModification String?
  userMessage      String?
  profile          String?
  srFilter1        String?
  srFilter2        String?

  serviceRequest  ServiceRequest[]
  versionForecast VersionForecast[]
  testPssSystem   TestPssSystem[]
  resolution      Resolution[]
  relatedSr       RelatedSr[]
}
