generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres" // "mysql"
  url      = env("POSTGRES_HOST") // env("DATABASE_URL")
}

model ForecastStatus {
  id                      Int                   @id @default(autoincrement())
  status                  String                @unique
  description             String?
  forecastStatusRulesFrom ForecastStatusRules[] @relation("StatusFrom")
  forecastStatusRulesTo   ForecastStatusRules[] @relation("StatusTo")
  versionForecast         VersionForecast[]
}

model ForecastStatusRules {
  id         Int @id @default(autoincrement())
  statusFrom Int
  statusTo   Int

  statusFromRelation ForecastStatus @relation("StatusFrom", fields: [statusFrom], references: [id])
  statusToRelation   ForecastStatus @relation("StatusTo", fields: [statusTo], references: [id])

  @@unique([statusFrom, statusTo])
}

model RelatedSr {
  id        Int @id @default(autoincrement())
  srNumber1 Int
  srNumber2 Int
  linkedBy  Int

  srNumber1Relation ServiceRequest @relation("SrNumber1", fields: [srNumber1], references: [id])
  srNumber2Relation ServiceRequest @relation("SrNumber2", fields: [srNumber2], references: [id])
  linkedByRelation  VttsUser       @relation(fields: [linkedBy], references: [id])

  @@unique([srNumber1, srNumber2])
}

model StageVersion {
  id             Int              @id @default(autoincrement())
  stage          String           @unique
  ReleaseVersion ReleaseVersion[]
}

model ReleaseVersion {
  id             Int       @id @default(autoincrement())
  app            Int
  releaseVersion Int
  testDeadline   DateTime?
  stage          Int

  appRelation   VttsSystem      @relation(fields: [app], references: [id])
  systemVersion SystemVersion   @relation(fields: [releaseVersion], references: [id])
  testPssSystem TestPssSystem[]
  stageRelation StageVersion    @relation(fields: [stage], references: [id])

  @@unique([app, releaseVersion, stage])
}

model Resolution {
  id             Int       @id @default(autoincrement())
  srNumber       Int
  assigned       Int
  resolutionDate DateTime?
  comments       String?

  srNumberRelation ServiceRequest @relation(fields: [srNumber], references: [id])
  assignedRelation VttsUser       @relation(fields: [assigned], references: [id])
}

model ServiceRequest {
  id           Int     @id @default(autoincrement())
  srType       Int
  srNumber     String  @unique
  description  String?
  externalLink String?
  dataTestPath String?
  trelloLink   String?
  lastTester   Int?
  statusSr     String

  srTypeRelation     SrType    @relation(fields: [srType], references: [id])
  lastTesterRelation VttsUser? @relation(fields: [lastTester], references: [id])

  testPssSystem   TestPssSystem[]
  versionForecast VersionForecast[]
  relatedSr1      RelatedSr[]       @relation("SrNumber1")
  relatedSr2      RelatedSr[]       @relation("SrNumber2")
  resolution      Resolution[]
}

model SrType {
  id          Int     @id @default(autoincrement())
  srType      String  @unique
  description String?

  serviceRequest ServiceRequest[]
}

model SystemVersion {
  id           Int       @id @default(autoincrement())
  app          Int
  version      String
  deliveryDate DateTime?

  appRelation    VttsSystem       @relation(fields: [app], references: [id])
  releaseVersion ReleaseVersion[]

  // Relación inversa hacia VersionForecast (sin fields ni references)
  versionForecast VersionForecast[]
}

model TestAttachedInfo {
  id              Int    @id @default(autoincrement())
  idTestPssSystem Int
  fileName        String

  testPssSystemRelation TestPssSystem @relation(fields: [idTestPssSystem], references: [id])

  @@unique([idTestPssSystem, fileName])
}

model TestPssSystem {
  id               Int       @id @default(autoincrement())
  srNumber         Int
  assigned         Int?
  status           Int?
  dateTest         DateTime?
  comments         String?   @db.VarChar(1024)
  dateModification DateTime?
  releaseNote      String?
  windchillComment String?
  releaseVersion   Int

  srNumberRelation       ServiceRequest     @relation(fields: [srNumber], references: [id])
  assignedRelation       VttsUser?          @relation(fields: [assigned], references: [id])
  statusRelation         TestStatus?        @relation(fields: [status], references: [id])
  testAttachedInfo       TestAttachedInfo[]
  releaseVersionRelation ReleaseVersion     @relation(fields: [releaseVersion], references: [id])

  @@unique([releaseVersion, srNumber])
}

model TestStatus {
  id           Int     @id @default(autoincrement())
  idStatus     String  @unique
  descStatus   String?
  isFailed     String?
  displayOrder Int     @unique

  testPssSystem TestPssSystem[]
}

model VersionForecast {
  id               Int       @id @default(autoincrement())
  app              Int
  version          Int
  srNumber         Int
  dateModification DateTime?
  assigned         Int
  status           Int

  appRelation      VttsSystem     @relation(fields: [app], references: [id])
  versionRelation  SystemVersion  @relation(fields: [version], references: [id]) // Relación con SystemVersion
  srNumberRelation ServiceRequest @relation(fields: [srNumber], references: [id])
  assignedRelation VttsUser       @relation(fields: [assigned], references: [id])
  statusRelation   ForecastStatus @relation(fields: [status], references: [id])

  @@unique([app, version, srNumber])
}

model VttsSystem {
  id              Int     @id @default(autoincrement())
  app             String  @unique
  description     String?
  explorerVersion String?
  jreVersion      String?

  releaseVersion  ReleaseVersion[]
  systemVersion   SystemVersion[]
  versionForecast VersionForecast[]
}

model VttsUser {
  id               Int       @id @default(autoincrement())
  assigned         String    @unique
  userName         String
  password         String
  email            String
  mailSign         String
  dateModification DateTime?
  userModification String?
  userMessage      String?
  profile          String?
  srFilter1        String?   @db.VarChar(500)
  srFilter2        String?   @db.VarChar(500)

  serviceRequest  ServiceRequest[]
  versionForecast VersionForecast[]
  testPssSystem   TestPssSystem[]
  resolution      Resolution[]
  relatedSr       RelatedSr[]
}
