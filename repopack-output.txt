This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-02T08:34:49.513Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  [locale]/
    (app)/
      serviceRequest/
        page.tsx
      testRelease/
        page.tsx
      version/
        page.tsx
      layout.tsx
      page.tsx
    (auth)/
      login/
        page.tsx
      layout.tsx
    layout.tsx
  api/
    login/
      route.ts
    upload/
      route.ts
    v1/
      related/
        [id]/
          route.ts
        route.ts
      releaseVersion/
        route.ts
      serviceRequest/
        [id]/
          route.ts
        route.ts
      srType/
        route.ts
      stageVersion/
        route.ts
      system/
        route.ts
      systemStatus/
        route.ts
      systemVersion/
        route.ts
      testPssSystem/
        [id]/
          route.ts
        route.ts
      users/
        [id]/
          route.ts
        route.ts
  providers.tsx
components/
  alert/
    InfoAlert.tsx
  auth/
    AuthLayout.tsx
    Login.tsx
  charts/
    Steam.tsx
  dragndrop/
    DragAndDrop.css
    DragAndDrop.tsx
  home/
    Content.tsx
  hooks/
    useBodyLock.ts
    useIsomorphicLayoutEffect.ts
  icons/
    accounts/
      dots-icon.tsx
      export-icon.tsx
      info-icon.tsx
      trash-icon.tsx
    acme-icon.tsx
    acmelogo.tsx
    community.tsx
    Icons.tsx
    IconSwitch.tsx
  language/
    __tests__/
      LocaleSwitcherSelect.test.tsx
    LocaleSwitcherSelect.tsx
  layout/
    layout-context.ts
    layout.tsx
  navbar/
    modals/
      EqualChanger.tsx
      FilterModal.tsx
      FilterModalSkeleton.tsx
    BurgerButton.tsx
    DarkModeSwitch.tsx
    Navbar.styles.ts
    Navbar.tsx
    NotificationsDropdown.tsx
    UserDropdown.tsx
  serviceRequest/
    modals/
      EditModal.tsx
    table/
      RenderCell.tsx
    index.tsx
  sidebar/
    CompaniesDropdown.tsx
    Sidebar.styles.ts
    Sidebar.tsx
    SidebarItem.tsx
    SidebarMenu.tsx
  table/
    Table.tsx
  test-release/
    modals/
      Attached.tsx
      Comments.tsx
      EditModal.tsx
      EditModalSkeleton.tsx
      ViewModal.tsx
      ViewModalSkeleton.tsx
    index.tsx
    ListSRSkeleton.tsx
    ServiceRequestSkeleton.tsx
    TestCard.tsx
  version/
    table/
      RenderCell.tsx
    index.tsx
config/
  fonts.ts
helpers/
  alert-context.tsx
  allowed-routes.ts
  auth-store.ts
  data-store.ts
  interfaces.ts
  js-utils.ts
  jwt-verificator.ts
  schemas.ts
  types.ts
i18n/
  request.ts
messages/
  en.json
  es.json
prisma/
  schema.prisma
public/
  vercel.svg
styles/
  globals.css
.eslintrc.json
.gitignore
global.d.ts
jest.config.js
LICENSE
middleware.ts
next.config.js
package.json
postcss.config.js
README.md
routing.ts
setupTests.ts
tailwind.config.js
tsconfig.jest.json
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/[locale]/(app)/serviceRequest/page.tsx
================
import React from "react";
import { ServiceRequest } from "@/components/serviceRequest";

const serviceRequest = () => {
  return <ServiceRequest />;
};

export default serviceRequest;

================
File: app/[locale]/(app)/testRelease/page.tsx
================
import React from "react";
import { TestRelease } from "@/components/test-release";

const testRelease = () => {
  return <TestRelease />;
};

export default testRelease;

================
File: app/[locale]/(app)/version/page.tsx
================
import React from "react";
import { Version } from "@/components/version";

const version = () => {
  return <Version />;
};

export default version;

================
File: app/[locale]/(app)/layout.tsx
================
import { Layout } from "@/components/layout/layout";
import "@/styles/globals.css";
import { Toaster } from "sonner";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <Layout>
      {children}
      <Toaster richColors closeButton position="top-center" />
    </Layout>
  );
}

================
File: app/[locale]/(app)/page.tsx
================
import type { NextPage } from "next";
import { Content } from "@/components/home/Content";

const Home: NextPage = () => {
  return <Content />;
};

export default Home;

================
File: app/[locale]/(auth)/login/page.tsx
================
import React from "react";
import { Login } from "@/components/auth/Login";

const login = () => {
  return <Login />;
};

export default login;

================
File: app/[locale]/(auth)/layout.tsx
================
import { AuthLayoutWrapper } from "@/components/auth/AuthLayout";
import "@/styles/globals.css";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return <AuthLayoutWrapper>{children}</AuthLayoutWrapper>;
}

================
File: app/[locale]/layout.tsx
================
import "@/styles/globals.css";
import type { Metadata } from "next";
import { Providers } from "../providers";
import { fontSans } from "@/config/fonts";
import clsx from "clsx";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";

export const metadata: Metadata = {
  title: "VTTS - v01.00.00",
  description: "Generated by Next.js",
};

export default async function RootLayout({
  children,
  params: { locale },
}: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();
  return (
    <html lang="en">
      <body className={clsx("font-sans antialiased", fontSans.className)}>
        <Providers>
          {" "}
          <NextIntlClientProvider messages={messages}>{children}</NextIntlClientProvider>
        </Providers>
      </body>
    </html>
  );
}

================
File: app/api/login/route.ts
================
import { NextResponse, NextRequest } from "next/server";
import type { NextApiRequest, NextApiResponse } from "next";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { useAuthStore } from "@/helpers/auth-store";
import { PrismaClient } from "@prisma/client";
import { user } from "@nextui-org/react";

const JWT_SECRET_KEY = process.env.JWT_SECRET || "ultrasecret";
const prisma = new PrismaClient();

export async function POST(req: NextRequest, res: NextApiResponse) {
  const { user_name, password } = await req.json();

  // Buscar el usuario en la base de datos
  const user = await prisma.vttsUser.findUnique({
    where: {
      assigned: user_name,
    },
  });

  if (!user) {
    return NextResponse.json({ message: "Invalid credentials" }, { status: 401 });
  }

  // Comparar la contraseÃ±a proporcionada con la almacenada en la base de datos
  const isMatch = await bcrypt.compare(password, user.password || "");

  if (!isMatch) {
    return NextResponse.json({ message: "Invalid credentials" }, { status: 401 });
  }

  // Si las credenciales son correctas, crear el token JWT
  const payload = { username: user.userName, ASSIGNED: user.assigned };

  const token = jwt.sign(payload, JWT_SECRET_KEY, { expiresIn: "96h" });
  // Configurar la cookie con el token
  const response = NextResponse.json({ message: "Login successful", token: token, user: user });
  response.headers.set("Set-Cookie", `userAuth=${token}; HttpOnly; Path=/; Max-Age=345600; Secure; SameSite=Strict`);

  //return response;
  return response;
}

export async function GET(request: NextRequest) {
  return NextResponse.json({ message: "This endpoint only supports POST requests" });
}

================
File: app/api/upload/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import path from "path";
import fs from "fs";

export const POST = async (req: NextRequest) => {
  const formData = await req.formData();
  const body = Object.fromEntries(formData);
  const file = (body.file as Blob) || null;
  const UPLOAD_DIR = path.resolve("public/documents" + "/" + body.srNumber);

  if (file) {
    const buffer = Buffer.from(await file.arrayBuffer());
    if (!fs.existsSync(UPLOAD_DIR)) {
      fs.mkdirSync(UPLOAD_DIR);
    }

    fs.writeFileSync(path.resolve(UPLOAD_DIR, (body.file as File).name), buffer);
  } else {
    return NextResponse.json({
      success: false,
    });
  }

  return NextResponse.json({
    success: true,
    name: (body.file as File).name,
  });
};

================
File: app/api/v1/related/[id]/route.ts
================
import { NextResponse } from "next/server";
import type { NextApiRequest } from "next";
import type { NextRequest } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    const result = await prisma.relatedSr.findUniqueOrThrow({
      where: {
        id: parseInt(params.id),
      },
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/related/route.ts
================
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { PrismaClient } from "@prisma/client";
import { release } from "os";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  // srType=1&equalType=true&system=1&systemVersion=08.00.00&stageVersion=1&equalStageVersion=true&serviceRequest=ISR.1116&user=1&equalUser=true&systemStatus=1&equalSystemStatus=true&releaseNote=YES&
  const { searchParams } = new URL(req.url);
  const srNumber1 = searchParams.get("srNumber1");
  const srNumber2 = searchParams.get("srNumber2");
  const linkedBy = searchParams.get("linkedBy");

  let whereClause = {};

  if (srNumber1) {
    whereClause = { ...whereClause, srNumber1Relation: { id: parseInt(srNumber1) } };
  }
  if (srNumber2) {
    whereClause = { ...whereClause, srNumber2Relation: { id: parseInt(srNumber2) } };
  }

  if (linkedBy) {
    whereClause = { ...whereClause, linkedByRelation: linkedBy };
  }

  try {
    const result = await prisma.relatedSr.findMany({
      where: whereClause,
      include: {
        srNumber1Relation: true,
        srNumber2Relation: true,
        linkedByRelation: true,
      },
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.log(error);
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/releaseVersion/route.ts
================
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  const { searchParams } = new URL(req.url);
  const orderBy = searchParams.get("orderBy");
  const orderType = searchParams.get("orderType");
  const order = orderBy ? { [orderBy]: orderType } : undefined;
  const limit = searchParams.get("limit") ? parseInt(searchParams.get("limit") || "") : undefined;
  try {
    const result = await prisma.releaseVersion.findMany({
      orderBy: order,
      take: limit,
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/serviceRequest/[id]/route.ts
================
import { NextResponse } from "next/server";
import type { NextApiRequest } from "next";
import type { NextRequest } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    const result = await prisma.serviceRequest.findUniqueOrThrow({
      where: {
        id: parseInt(params.id),
      },
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/serviceRequest/route.ts
================
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  const { searchParams } = new URL(req.url);
  const distinct = searchParams.get("distinct");
  const srNumber = searchParams.get("srNumber");
  const srType = searchParams.get("srType");
  const status = searchParams.get("status");
  const orderBy = searchParams.get("orderBy");
  const orderDirection = searchParams.get("orderDirection");

  const whereClause = {
    srNumber: srNumber ? { contains: srNumber } : undefined,
    srType: srType ? { equals: parseInt(srType) } : undefined,
    statusSr: status ? { equals: status } : undefined,
  };
  const orderByClause = orderBy && orderDirection ? { [orderBy]: orderDirection } : undefined;
  try {
    if (distinct != null && distinct === "true") {
      const result = await prisma.serviceRequest.findMany({
        distinct: ["srNumber"],
        select: {
          srNumber: true,
        },
      });
      return NextResponse.json(result, { status: 200 });
    } else {
      const result = await prisma.serviceRequest.findMany({
        include: {
          srTypeRelation: true,
        },
        where: whereClause,
        orderBy: orderByClause,
      });
      return NextResponse.json(result, { status: 200 });
    }
  } catch (error) {
    console.error("Error fetching service request", error);
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/srType/route.ts
================
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET() {
  try {
    const result = await prisma.srType.findMany();
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/stageVersion/route.ts
================
import { NextResponse, NextRequest } from "next/server";
import { NextApiRequest, NextApiResponse } from "next";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  try {
    const result = await prisma.stageVersion.findMany();
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/system/route.ts
================
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET() {
  try {
    const result = await prisma.vttsSystem.findMany();
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/systemStatus/route.ts
================
import { NextResponse, NextRequest } from "next/server";
import { NextApiRequest, NextApiResponse } from "next";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  try {
    const result = await prisma.testStatus.findMany({
      orderBy: {
        displayOrder: "asc",
      },
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/systemVersion/route.ts
================
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  const { searchParams } = new URL(req.url);
  const distinct = searchParams.get("distinct");
  const orderBy = searchParams.get("orderBy");
  const orderDirection = searchParams.get("orderDirection");

  try {
    if (distinct != null && distinct === "true") {
      const result = await prisma.systemVersion.findMany({
        distinct: ["version"],
        select: {
          version: true,
        },
      });
      return NextResponse.json(result, { status: 200 });
    } else {
      const result = await prisma.systemVersion.findMany({
        include: {
          appRelation: true,
        },
        orderBy: orderBy ? { [orderBy]: orderDirection } : undefined,
      });
      return NextResponse.json(result, { status: 200 });
    }
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/api/v1/testPssSystem/[id]/route.ts
================
import { NextResponse } from "next/server";
import type { NextApiRequest } from "next";
import type { NextRequest } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

type Data = {
  success: boolean;
  data?: any;
  error?: string;
};

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    const result = await prisma.testPssSystem.findUniqueOrThrow({
      where: {
        id: parseInt(params.id),
      },
      include: {
        testAttachedInfo: true,
        srNumberRelation: {
          include: {
            lastTesterRelation: true,
            srTypeRelation: true,
          },
        },
        assignedRelation: true,
        statusRelation: true,
        releaseVersionRelation: {
          include: {
            stageRelation: true,
            appRelation: true,
            systemVersion: true,
          },
        },
      },
    });

    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.error("Error fetching data:", error);
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

export async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {
  const { id } = await req.json();
  try {
    const resultado = await prisma.testPssSystem.update({
      where: {
        id: parseInt(params.id),
      }, // O el identificador que estÃ©s usando
      data: {
        assigned: id, // Campo que deseas actualizar
      },
    });
    // if (!resultado.acknowledged || resultado.modifiedCount === 0) {
    //   return NextResponse.json({ message: "Couldn't update" }, { status: 400 });
    // }

    return NextResponse.json({ message: "SR unlinked successfully" });
  } catch (error) {
    console.error("Error to update field:", error);
    return NextResponse.json({ message: "Internal Server Error" }, { status: 500 });
  }
}

export async function PUT(req: Request, { params }: { params: { id: string } }) {
  //const { id, file, comments, status, releaseNote, dateTest } = await req.json();
  const formData = await req.formData();
  const { comments, status, releaseNote, dateTest, file, fileId, srNumber } = Object.fromEntries(formData);
  try {
    const result = await prisma.$transaction(async (prisma) => {
      const testPssSystem = await prisma.testPssSystem.update({
        where: {
          id: parseInt(params.id),
        },
        data: {
          comments: comments.toString() ?? "",
          status: parseInt(status.toString()) ?? 0,
          releaseNote: releaseNote.toString() ?? "no",
          dateTest: new Date(dateTest.toString()) ?? new Date(),
          dateModification: new Date(),
        },
      });
      let attachedInfo;
      if (fileId !== "") {
        attachedInfo = await prisma.testAttachedInfo.update({
          where: {
            id: parseInt(fileId.toString()),
          },
          data: {
            fileName: srNumber + "/" + file.toString(),
          },
        });
      } else {
        attachedInfo = await prisma.testAttachedInfo.create({
          data: {
            fileName: srNumber + "/" + file.toString(),
            testPssSystemRelation: {
              connect: {
                id: testPssSystem.id,
              },
            },
          },
        });
      }
      return { testPssSystem, attachedInfo };
    });

    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.error("Error to update field:", error);
    return NextResponse.json({ message: "Internal Server Error" }, { status: 500 });
  }
}

================
File: app/api/v1/testPssSystem/route.ts
================
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { PrismaClient } from "@prisma/client";
import { release } from "os";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  // srType=1&equalType=true&system=1&systemVersion=08.00.00&stageVersion=1&equalStageVersion=true&serviceRequest=ISR.1116&user=1&equalUser=true&systemStatus=1&equalSystemStatus=true&releaseNote=YES&
  const { searchParams } = new URL(req.url);
  const srType = searchParams.get("srType");
  const equalType = searchParams.get("equalType") || "true";
  const system = searchParams.get("system");
  const systemVersion = searchParams.get("systemVersion");
  const systemVersionId = searchParams.get("systemVersionId");
  const stageVersion = searchParams.get("stageVersion");
  const equalStageVersion = searchParams.get("equalStageVersion") || "true";
  const serviceRequest = searchParams.get("serviceRequest");
  const user = searchParams.get("user");
  const equalUser = searchParams.get("equalUser") || "true";
  const systemStatus = searchParams.get("systemStatus");
  const equalSystemStatus = searchParams.get("equalSystemStatus") || "true";
  const releaseNote = searchParams.get("releaseNote");

  let whereClause = {};
  if (srType) {
    if (equalType === "true") whereClause = { ...whereClause, srNumberRelation: { srType: parseInt(srType) } };
    else whereClause = { ...whereClause, srNumberRelation: { srType: { not: parseInt(srType) } } };
  }
  let releaseVersionConditions: any = {};

  if (system) {
    releaseVersionConditions = { ...releaseVersionConditions, app: parseInt(system) };
  }

  if (systemVersion) {
    releaseVersionConditions = {
      ...releaseVersionConditions,
      systemVersion: { version: systemVersion },
    };
  }

  if (systemVersionId) {
    releaseVersionConditions = { ...releaseVersionConditions, releaseVersion: parseInt(systemVersionId) };
  }

  if (stageVersion) {
    if (equalStageVersion === "true") {
      releaseVersionConditions = { ...releaseVersionConditions, stage: parseInt(stageVersion) };
    } else {
      releaseVersionConditions = { ...releaseVersionConditions, isNot: { stage: parseInt(stageVersion) } };
    }
  }

  if (Object.keys(releaseVersionConditions).length > 0) {
    whereClause = { ...whereClause, releaseVersionRelation: releaseVersionConditions };
  }
  if (serviceRequest) whereClause = { ...whereClause, srNumberRelation: { srNumber: serviceRequest } };
  if (user) {
    if (equalUser === "true") {
      if (user != "999") whereClause = { ...whereClause, assigned: parseInt(user) };
      else whereClause = { ...whereClause, assigned: null };
    } else {
      if (user != "999") whereClause = { ...whereClause, assigned: { not: parseInt(user) } };
      else whereClause = { ...whereClause, assigned: { not: null } };
    }
  }
  if (systemStatus) {
    if (equalSystemStatus === "true") whereClause = { ...whereClause, status: parseInt(systemStatus) };
    else whereClause = { ...whereClause, status: { not: parseInt(systemStatus) } };
  }
  if (releaseNote) whereClause = { ...whereClause, releaseNote: releaseNote };
  try {
    const result = await prisma.testPssSystem.findMany({
      include: {
        testAttachedInfo: true,
        srNumberRelation: {
          include: {
            lastTesterRelation: true,
            srTypeRelation: true,
          },
        },
        assignedRelation: true,
        statusRelation: true,
        releaseVersionRelation: {
          include: {
            stageRelation: true,
            systemVersion: true,
            appRelation: true,
          },
        },
      },
      where: whereClause,
      orderBy: { id: "asc" },
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.error("Error fetching data:", error);
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const test = await prisma.testPssSystem.create(body);
    return NextResponse.json({ success: true, data: test }, { status: 201 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to create data" }, { status: 400 });
  }
}

================
File: app/api/v1/users/[id]/route.ts
================
import { NextResponse, NextRequest } from "next/server";
import { NextApiRequest, NextApiResponse } from "next";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    const result = await prisma.vttsUser.findUnique({
      where: {
        id: parseInt(params.id),
      },
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

export async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {
  const { filter1, filter2 } = await req.json();
  console.log(filter1, filter2);
  let data = {};
  if (filter1 === undefined && filter2 === undefined) {
    return NextResponse.json({ success: false, error: "Missing required fields" }, { status: 400 });
  }
  if (filter1 === "" && filter2 === "") {
    return NextResponse.json({ success: false, error: "Missing required fields" }, { status: 400 });
  }
  if (filter1 !== undefined && filter1 != "") {
    data = { ...data, srFilter1: filter1 };
  }
  if (filter2 !== undefined && filter2 != "") {
    data = { ...data, srFilter2: filter2 };
  }

  try {
    const result = await prisma.vttsUser.update({
      where: {
        id: parseInt(params.id),
      },
      data: data,
    });
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to update data" }, { status: 500 });
  }
}

================
File: app/api/v1/users/route.ts
================
import { NextResponse, NextRequest } from "next/server";
import { NextApiRequest, NextApiResponse } from "next";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req: Request, res: Response) {
  try {
    const result = await prisma.vttsUser.findMany();
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    return NextResponse.json({ success: false, error: "Failed to fetch data" }, { status: 500 });
  }
}

================
File: app/providers.tsx
================
"use client";
import * as React from "react";
import { NextUIProvider } from "@nextui-org/system";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { ThemeProviderProps } from "next-themes/dist/types";
import { AlertProvider } from "../helpers/alert-context";

export interface ProvidersProps {
  children: React.ReactNode;
  themeProps?: ThemeProviderProps;
}

export function Providers({ children, themeProps }: ProvidersProps) {
  return (
    <AlertProvider>
      <NextUIProvider>
        <NextThemesProvider defaultTheme="light" attribute="class" {...themeProps}>
          {children}
        </NextThemesProvider>
      </NextUIProvider>
    </AlertProvider>
  );
}

================
File: components/alert/InfoAlert.tsx
================
import React from "react";
import { useEffect } from "react";
import { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure } from "@nextui-org/react";
import { InfoAlertProps } from "@/helpers/interfaces";
import { useAlert } from "@/helpers/alert-context";

export const InfoAlert: React.FC<InfoAlertProps> = (props) => {
  const { alert, showAlert, hideAlert } = useAlert();
  let { isOpen, onOpen, onOpenChange, onClose } = useDisclosure();
  return (
    <>
      {alert && (
        <Modal
          backdrop="opaque"
          isOpen={true} // Usa el estado `isOpen`
          onOpenChange={onOpenChange}
          motionProps={{
            variants: {
              enter: {
                y: 0,
                opacity: 1,
                transition: {
                  duration: 0.3,
                  ease: "easeOut",
                },
              },
              exit: {
                y: -20,
                opacity: 0,
                transition: {
                  duration: 0.2,
                  ease: "easeIn",
                },
              },
            },
          }}>
          <ModalContent>
            {(onClose) => (
              <>
                <ModalBody>
                  <p>{alert.message}</p>
                </ModalBody>
                <ModalFooter>
                  <Button size="sm" color="danger" variant="light" onPress={hideAlert}>
                    Close
                  </Button>
                  <Button size="sm" color="primary" onPress={hideAlert}>
                    Action
                  </Button>
                </ModalFooter>
              </>
            )}
          </ModalContent>
        </Modal>
      )}
    </>
  );
};

================
File: components/auth/AuthLayout.tsx
================
import { Image } from "@nextui-org/react";
import { Divider } from "@nextui-org/divider";

interface Props {
  children: React.ReactNode;
}

export const AuthLayoutWrapper = ({ children }: Props) => {
  return (
    <div className="flex h-screen">
      <div className="flex-1 flex-col flex items-center justify-center p-6">
        <div className="md:hidden absolute left-0 right-0 bottom-0 top-0 z-0">
          <Image className="w-full h-full" src="https://nextui.org/gradients/docs-right.png" alt="gradient" />
        </div>
        {children}
      </div>
    </div>
  );
};

================
File: components/auth/Login.tsx
================
"use client";

import { LoginSchema } from "@/helpers/schemas";
import { LoginFormType } from "@/helpers/types";
import { Button, Input, Spinner } from "@nextui-org/react";
import { Formik } from "formik";
import { useRouter } from "next/navigation";
import { useCallback, useState } from "react";
//Cambio de Capitalize a PascalCase
export const Login = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const router = useRouter();
  const initialValues: LoginFormType = {
    user_name: "ITL",
    password: "Nacho369852",
  };

  const handleLogin = useCallback(
    async (values: LoginFormType) => {
      setLoading(true);

      const res = await fetch("/api/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ user_name: values.user_name, password: values.password }),
      });

      if (res.ok) {
        await res.json().then((data) => {
          localStorage.setItem("user", JSON.stringify(data.user));
          router.push("/");
        });
      } else {
        const data = await res.json();
        setError(data.message);
      }
    },
    [router]
  );

  return (
    <>
      <div className="text-center text-[25px] font-bold mb-6">Login</div>

      <Formik initialValues={initialValues} validationSchema={LoginSchema} onSubmit={handleLogin}>
        {({ values, errors, touched, handleChange, handleSubmit }) => (
          <>
            <div className="flex flex-col w-1/4 gap-4 mb-4">
              <Input
                variant="bordered"
                label="Username"
                type="text"
                value={values.user_name}
                isInvalid={!!errors.user_name && !!touched.user_name}
                errorMessage={errors.user_name}
                onChange={handleChange("user_name")}
              />
              <Input
                variant="bordered"
                label="Password"
                type="password"
                value={values.password}
                isInvalid={!!errors.password && !!touched.password}
                errorMessage={errors.password}
                onChange={handleChange("password")}
              />
            </div>

            <Button onPress={() => handleSubmit()} variant="flat" color="primary">
              {!loading ? "Login" : <Spinner />}
            </Button>
          </>
        )}
      </Formik>
    </>
  );
};

================
File: components/charts/Steam.tsx
================
import React from "react";
import Chart, { Props } from "react-apexcharts";

const state: Props["series"] = [
  {
    name: "Series1",
    data: [31, 40, 28, 51, 42, 109, 100],
  },
  {
    name: "Series2",
    data: [11, 32, 45, 32, 34, 52, 41],
  },
];

const options: Props["options"] = {
  chart: {
    type: "area",
    animations: {
      easing: "linear",
      speed: 300,
    },
    sparkline: {
      enabled: false,
    },
    brush: {
      enabled: false,
    },
    id: "basic-bar",
    foreColor: "hsl(var(--nextui-default-800))",
    stacked: true,
    toolbar: {
      show: false,
    },
  },

  xaxis: {
    categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999],
    labels: {
      // show: false,
      style: {
        colors: "hsl(var(--nextui-default-800))",
      },
    },
    axisBorder: {
      color: "hsl(var(--nextui-nextui-default-200))",
    },
    axisTicks: {
      color: "hsl(var(--nextui-nextui-default-200))",
    },
  },
  yaxis: {
    labels: {
      style: {
        // hsl(var(--nextui-content1-foreground))
        colors: "hsl(var(--nextui-default-800))",
      },
    },
  },
  tooltip: {
    enabled: false,
  },
  grid: {
    show: true,
    borderColor: "hsl(var(--nextui-default-200))",
    strokeDashArray: 0,
    position: "back",
  },
  stroke: {
    curve: "smooth",
    fill: {
      colors: ["red"],
    },
  },
  // @ts-ignore
  markers: false,
};

export const Steam = () => {
  return (
    <>
      <div className="w-full z-20">
        <div id="chart">
          <Chart options={options} series={state} type="area" height={425} />
        </div>
      </div>
    </>
  );
};

================
File: components/dragndrop/DragAndDrop.css
================
.drag-drop {
  background: #fff;
  border: 1px solid var(--border-color);
  border-radius: 8px;
}
.document-uploader {
  border: 2px dashed #52525b;
  background-color: #f4f4f5;
  padding: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: relative;
  border-radius: 8px;
  cursor: pointer;
  max-height: 105px;
  height: 100%;

  &.active {
    border-color: #6dc24b;
  }

  .upload-info {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;

    svg {
      font-size: 36px;
      margin-right: 1rem;
    }

    div {
      p {
        margin: 0;
        font-size: 16px;
      }

      p:first-child {
        font-weight: bold;
      }
    }
  }

  .file-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
    height: 30vh;
    &__container {
      width: 100%;
      height: 100%;
      overflow: auto;
    }
  }

  .file-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;

    .file-info {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
      flex: 1;

      p {
        margin: 0;
        font-size: 14px;
        color: #333;
      }
    }

    .file-actions {
      cursor: pointer;

      svg {
        font-size: 18px;
        color: #888;
      }

      &:hover {
        svg {
          color: #d44;
        }
      }
    }
  }

  .browse-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    cursor: pointer;
    background-color: var(--primary-color);
    &:hover {
      background-color: transparent;
    }
  }

  .success-file {
    display: flex;
    align-items: center;
    color: #6dc24b;

    p {
      margin: 0;
      font-size: 14px;
      font-weight: bold;
    }
  }

  input[type="file"] {
    display: none;
  }
}

================
File: components/dragndrop/DragAndDrop.tsx
================
import React, { useEffect, useState, useRef } from "react";
import {
  DeleteIcon,
  CloudUploadIcon,
  DocIcon,
  XLSIcon,
  ImgIcon,
  TxtIcon,
  PDFIcon,
  DownloadIcon,
  FileUnknownIcon,
  AlertCircleIcon,
} from "@/components/icons/Icons";
import "@/components/dragndrop/DragAndDrop.css";
import { Button, Spacer, Progress, Tooltip } from "@nextui-org/react";
import { toast } from "sonner";

const DragNdrop = ({
  onFilesSelected,
  width,
  height,
  fileName,
  srNumber,
}: {
  onFilesSelected: Function;
  width: number | string;
  height: number;
  fileName?: string;
  srNumber?: string;
}) => {
  const [files, setFiles] = useState<File[]>([]);
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const [isFailed, setIsFailed] = useState(false);

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = event.target.files;
    console.log(srNumber);

    if (selectedFiles && selectedFiles.length > 0) {
      const newFiles = Array.from(selectedFiles);
      for (let i = 0; i < newFiles.length; i++) {
        newFiles[i];
        const formData = new FormData();
        formData.append("file", newFiles[i]);
        formData.append("srNumber", srNumber ?? "");

        try {
          const response = await fetch("/api/upload", {
            method: "POST",
            body: formData,
          });

          if (response.ok) {
            //alert("File uploaded successfully!");
            setIsFailed(false);
            onFilesSelected(newFiles[i]);
          } else {
            toast.error("Error uploading file", { duration: 3000, position: "top-right" });
          }
        } catch (error) {
          toast.error("Error uploading file", { duration: 3000, position: "top-right" });
          alert("Error uploading file.");
        }
      }
    }

    if (selectedFiles && selectedFiles.length > 0) {
      const newFiles = Array.from(selectedFiles);
      setFiles((prevFiles) => [...prevFiles, ...newFiles]);
    }
  };
  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    const droppedFiles = event.dataTransfer.files;
    if (droppedFiles.length > 0) {
      const newFiles = Array.from(droppedFiles);
      setFiles((prevFiles) => [...prevFiles, ...newFiles]);
    }
  };

  const handleDownload = async (file: string) => {
    const response = await fetch(`/documents/${srNumber}/${file}`);
    if (response.status === 200) {
      const blob = await response.blob();
      const link = document.createElement("a");
      link.href = window.URL.createObjectURL(blob);
      link.setAttribute("download", file);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } else {
      console.error("Error downloading file");
    }
  };

  const handleBrowse = () => {
    fileInputRef.current?.click();
  };

  const handleRemoveFile = (index: number) => {
    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));
  };

  const handleGetFile = async (fileName: string) => {
    // Realizar la solicitud HTTP para obtener el archivo
    const response = await fetch("/documents/" + srNumber + "/" + fileName);

    // Comprobar si la respuesta fue exitosa
    if (!response.ok) {
      setIsFailed(true);
      toast.error("Error downloading file", { duration: 3000, position: "top-right" });
    }

    // Convertir la respuesta en un Blob
    const blob = await response.blob();

    // Crear un objeto File a partir del Blob
    const file = new File([blob], fileName, {
      type: blob.type,
    });

    return file;
  };

  const handleFileType = (file: string) => {
    if (file == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") return <DocIcon />;
    else if (file.includes("jpg") || file.includes("jpeg") || file.includes("png")) return <ImgIcon />;
    else if (file == "application/pdf") return <PDFIcon />;
    else if (file == "text/plain") return <TxtIcon />;
    else if (file == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") return <XLSIcon />;
    else return <FileUnknownIcon />;
  };
  useEffect(() => {
    console.log(fileName);
    if (fileName != undefined && fileName != "") {
      if (fileName.includes("/")) fileName = fileName.split("/")[1];
      handleGetFile(fileName).then((file) => {
        setFiles((prevFiles) => [file]);
        onFilesSelected(file);
      });
    } else {
      setFiles([]);
    }
  }, []);

  return (
    <section className="drag-drop" style={{ width: width, height: height }}>
      <div
        className={`document-uploader ${files.length > 0 ? "upload-box active" : "upload-box"}`}
        onDrop={handleDrop}
        onClick={handleBrowse}
        onDragOver={(event) => event.preventDefault()}>
        {files.length == 0 && (
          <>
            <div className="upload-info">
              <div className="flex flex-col text-center items-center mt-4">
                <CloudUploadIcon
                  style={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%",
                    zIndex: 0,
                    opacity: 0.05,
                  }}
                />
                <div style={{ zIndex: 10 }}>
                  <p className="text-xs" style={{ color: "#52525b" }}>
                    Drag and drop your files here
                  </p>
                  <p className="text-xs" style={{ color: "#52525b" }}>
                    Limit 1.5MB per file. Supported files: .pdf, .docx, .jpg, .png, .txt, .xlsx
                  </p>
                  <input
                    type="file"
                    hidden
                    id="browse"
                    ref={fileInputRef}
                    onChange={handleFileChange}
                    accept=".pdf,.docx,.jpg,.png,.txt,.xlsx"
                  />
                  {/* <Spacer y={3} />
                  <Button variant="light" color="primary" size="sm" onClick={handleBrowse}>
                    Browse
                  </Button> */}
                </div>
              </div>
            </div>
          </>
        )}

        {files.length > 0 && (
          <div className="file-list">
            <div className="flex justify-center items-center w-full h-full">
              <table className="table-auto border-separate border-spacing-2">
                {files.map((file, index) => (
                  <tbody key={index}>
                    <tr>
                      <td>{handleFileType(file.type)}</td>
                      <td> {file.name}</td>
                      <td>
                        {isFailed ? (
                          <Tooltip content="File not found. Download unavailable" color="danger">
                            <div>
                              <AlertCircleIcon />
                            </div>
                          </Tooltip>
                        ) : (
                          <DownloadIcon
                            className="cursor-pointer"
                            onClick={() => {
                              handleDownload(file.name);
                            }}
                          />
                        )}
                      </td>
                      <td className="file-actions">
                        <DeleteIcon onClick={() => handleRemoveFile(index)} />
                      </td>
                    </tr>
                    <tr>
                      <td></td>

                      <td>
                        <Progress color="warning" size="sm" value={(file.size / 1500000) * 100} />
                      </td>
                      <td></td>
                      <td></td>
                    </tr>
                  </tbody>
                ))}
              </table>
            </div>
          </div>
        )}
        {/* 
        {files.length > 0 && (
          <div className="success-file">
            <p>{files.length} file(s) selected</p>
          </div>
        )} */}
      </div>
    </section>
  );
};

export default DragNdrop;

================
File: components/home/Content.tsx
================
"use client";
import React from "react";
import { useEffect } from "react";
import dynamic from "next/dynamic";
import { Link } from "@nextui-org/react";
import NextLink from "next/link";
import { useAuthStore } from "@/helpers/auth-store";
import { useTranslations } from "next-intl";

export const Content = () => {
  const t = useTranslations("HomePage");
  const { setCurrentWindow } = useAuthStore();
  useEffect(() => {
    setCurrentWindow("home");
  }, []);
  return (
    <div className="h-full lg:px-6">
      <h1>{t("title")}</h1>
    </div>
  );
};

================
File: components/hooks/useBodyLock.ts
================
"use client";
import {useEffect, useState} from 'react';
import {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect';

type ReturnType = [boolean, (locked: boolean) => void];

export const useLockedBody = (initialLocked = false): ReturnType => {
   const [locked, setLocked] = useState(initialLocked);

   // Do the side effect before render
   useIsomorphicLayoutEffect(() => {
      if (!locked) {
         return;
      }

      // Save initial body style
      const originalOverflow = document.body.style.overflow;
      const originalPaddingRight = document.body.style.paddingRight;

      // Lock body scroll
      document.body.style.overflow = 'hidden';

      // Get the scrollBar width
      const root = document.getElementById('___gatsby'); // or root
      const scrollBarWidth = root ? root.offsetWidth - root.scrollWidth : 0;

      // Avoid width reflow
      if (scrollBarWidth) {
         document.body.style.paddingRight = `${scrollBarWidth}px`;
      }

      return () => {
         document.body.style.overflow = originalOverflow;

         if (scrollBarWidth) {
            document.body.style.paddingRight = originalPaddingRight;
         }
      };
   }, [locked]);

   // Update state if initialValue changes
   useEffect(() => {
      if (locked !== initialLocked) {
         setLocked(initialLocked);
      }
      // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [initialLocked]);

   return [locked, setLocked];
};

================
File: components/hooks/useIsomorphicLayoutEffect.ts
================
import {useEffect, useLayoutEffect} from 'react';

export const useIsomorphicLayoutEffect =
   typeof window !== 'undefined' ? useLayoutEffect : useEffect;

================
File: components/icons/accounts/dots-icon.tsx
================
import React from "react";

export const DotsIcon = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        className="fill-default-400"
        fillRule="evenodd"
        clipRule="evenodd"
        d="M12 8C13.1 8 14 7.1 14 6C14 4.9 13.1 4 12 4C10.9 4 10 4.9 10 6C10 7.1 10.9 8 12 8ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10ZM12 16C10.9 16 10 16.9 10 18C10 19.1 10.9 20 12 20C13.1 20 14 19.1 14 18C14 16.9 13.1 16 12 16Z"
        fill="#969696"
      />
    </svg>
  );
};

================
File: components/icons/accounts/export-icon.tsx
================
import React from "react";

export const ExportIcon = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        className="fill-default-400"
        fillRule="evenodd"
        clipRule="evenodd"
        d="M12 9H16C16.55 9 17 8.55 17 8C17 7.45 16.55 7 16 7H12C11.45 7 11 7.45 11 8C11 8.55 11.45 9 12 9ZM12 13H16C16.55 13 17 12.55 17 12C17 11.45 16.55 11 16 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 17H16C16.55 17 17 16.55 17 16C17 15.45 16.55 15 16 15H12C11.45 15 11 15.45 11 16C11 16.55 11.45 17 12 17ZM7 7H9V9H7V7ZM7 11H9V13H7V11ZM7 15H9V17H7V15ZM20 3H4C3.45 3 3 3.45 3 4V20C3 20.55 3.45 21 4 21H20C20.55 21 21 20.55 21 20V4C21 3.45 20.55 3 20 3ZM19 19H5V5H19V19Z"
        fill="#969696"
      />
    </svg>
  );
};

================
File: components/icons/accounts/info-icon.tsx
================
import React from "react";

export const InfoIcon = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        className="fill-default-400"
        d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 17C11.45 17 11 16.55 11 16V12C11 11.45 11.45 11 12 11C12.55 11 13 11.45 13 12V16C13 16.55 12.55 17 12 17ZM13 9H11V7H13V9Z"
        fill="#969696"
      />
    </svg>
  );
};

================
File: components/icons/accounts/trash-icon.tsx
================
import React from "react";

export const TrashIcon = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        className="fill-default-400"
        fillRule="evenodd"
        clipRule="evenodd"
        d="M6 19C6 20.1 6.9 21 8 21H16C17.1 21 18 20.1 18 19V9C18 7.9 17.1 7 16 7H8C6.9 7 6 7.9 6 9V19ZM11.65 10.35C11.85 10.15 12.16 10.15 12.36 10.35L16 14H14V18H10V14H8L11.65 10.35ZM15.5 4L14.79 3.29C14.61 3.11 14.35 3 14.09 3H9.91C9.65 3 9.39 3.11 9.21 3.29L8.5 4H6C5.45 4 5 4.45 5 5C5 5.55 5.45 6 6 6H18C18.55 6 19 5.55 19 5C19 4.45 18.55 4 18 4H15.5Z"
        fill="#969696"
      />
    </svg>
  );
};

================
File: components/icons/acme-icon.tsx
================
import React from "react";

export const AcmeIcon = () => {
  return (
    <svg
      width="42"
      height="42"
      viewBox="0 0 56 56"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="w-11 h-12"
    >
      <rect
        className="stroke-divider fill-background"
        x="0.5"
        y="0.5"
        width="55"
        height="55"
        rx="7.5"
      />
      <path
        className="fill-default-400"
        fillRule="evenodd"
        clipRule="evenodd"
        d="M20.0007 29.3334C19.2673 29.3334 18.6673 29.9334 18.6673 30.6667C18.6673 31.4 19.2673 32 20.0007 32C20.734 32 21.334 31.4 21.334 30.6667C21.334 29.9334 20.734 29.3334 20.0007 29.3334ZM20.0007 34.6667C19.2673 34.6667 18.6673 35.2667 18.6673 36C18.6673 36.7334 19.2673 37.3334 20.0007 37.3334C20.734 37.3334 21.334 36.7334 21.334 36C21.334 35.2667 20.734 34.6667 20.0007 34.6667ZM20.0007 24C19.2673 24 18.6673 24.6 18.6673 25.3334C18.6673 26.0667 19.2673 26.6667 20.0007 26.6667C20.734 26.6667 21.334 26.0667 21.334 25.3334C21.334 24.6 20.734 24 20.0007 24ZM16.0007 24.6667C15.6273 24.6667 15.334 24.96 15.334 25.3334C15.334 25.7067 15.6273 26 16.0007 26C16.374 26 16.6673 25.7067 16.6673 25.3334C16.6673 24.96 16.374 24.6667 16.0007 24.6667ZM20.0007 18.6667C19.2673 18.6667 18.6673 19.2667 18.6673 20C18.6673 20.7334 19.2673 21.3334 20.0007 21.3334C20.734 21.3334 21.334 20.7334 21.334 20C21.334 19.2667 20.734 18.6667 20.0007 18.6667ZM40.0007 26C40.374 26 40.6673 25.7067 40.6673 25.3334C40.6673 24.96 40.374 24.6667 40.0007 24.6667C39.6273 24.6667 39.334 24.96 39.334 25.3334C39.334 25.7067 39.6273 26 40.0007 26ZM30.6673 21.3334C31.4007 21.3334 32.0007 20.7334 32.0007 20C32.0007 19.2667 31.4007 18.6667 30.6673 18.6667C29.934 18.6667 29.334 19.2667 29.334 20C29.334 20.7334 29.934 21.3334 30.6673 21.3334ZM30.6673 16.6667C31.0407 16.6667 31.334 16.3734 31.334 16C31.334 15.6267 31.0407 15.3334 30.6673 15.3334C30.294 15.3334 30.0007 15.6267 30.0007 16C30.0007 16.3734 30.294 16.6667 30.6673 16.6667ZM16.0007 30C15.6273 30 15.334 30.2934 15.334 30.6667C15.334 31.04 15.6273 31.3334 16.0007 31.3334C16.374 31.3334 16.6673 31.04 16.6673 30.6667C16.6673 30.2934 16.374 30 16.0007 30ZM25.334 39.3334C24.9607 39.3334 24.6673 39.6267 24.6673 40C24.6673 40.3734 24.9607 40.6667 25.334 40.6667C25.7073 40.6667 26.0007 40.3734 26.0007 40C26.0007 39.6267 25.7073 39.3334 25.334 39.3334ZM25.334 16.6667C25.7073 16.6667 26.0007 16.3734 26.0007 16C26.0007 15.6267 25.7073 15.3334 25.334 15.3334C24.9607 15.3334 24.6673 15.6267 24.6673 16C24.6673 16.3734 24.9607 16.6667 25.334 16.6667ZM25.334 21.3334C26.0673 21.3334 26.6673 20.7334 26.6673 20C26.6673 19.2667 26.0673 18.6667 25.334 18.6667C24.6007 18.6667 24.0007 19.2667 24.0007 20C24.0007 20.7334 24.6007 21.3334 25.334 21.3334ZM25.334 28.6667C24.2273 28.6667 23.334 29.56 23.334 30.6667C23.334 31.7734 24.2273 32.6667 25.334 32.6667C26.4407 32.6667 27.334 31.7734 27.334 30.6667C27.334 29.56 26.4407 28.6667 25.334 28.6667ZM36.0007 29.3334C35.2673 29.3334 34.6673 29.9334 34.6673 30.6667C34.6673 31.4 35.2673 32 36.0007 32C36.734 32 37.334 31.4 37.334 30.6667C37.334 29.9334 36.734 29.3334 36.0007 29.3334ZM36.0007 34.6667C35.2673 34.6667 34.6673 35.2667 34.6673 36C34.6673 36.7334 35.2673 37.3334 36.0007 37.3334C36.734 37.3334 37.334 36.7334 37.334 36C37.334 35.2667 36.734 34.6667 36.0007 34.6667ZM36.0007 24C35.2673 24 34.6673 24.6 34.6673 25.3334C34.6673 26.0667 35.2673 26.6667 36.0007 26.6667C36.734 26.6667 37.334 26.0667 37.334 25.3334C37.334 24.6 36.734 24 36.0007 24ZM36.0007 18.6667C35.2673 18.6667 34.6673 19.2667 34.6673 20C34.6673 20.7334 35.2673 21.3334 36.0007 21.3334C36.734 21.3334 37.334 20.7334 37.334 20C37.334 19.2667 36.734 18.6667 36.0007 18.6667ZM40.0007 30C39.6273 30 39.334 30.2934 39.334 30.6667C39.334 31.04 39.6273 31.3334 40.0007 31.3334C40.374 31.3334 40.6673 31.04 40.6673 30.6667C40.6673 30.2934 40.374 30 40.0007 30ZM30.6673 34.6667C29.934 34.6667 29.334 35.2667 29.334 36C29.334 36.7334 29.934 37.3334 30.6673 37.3334C31.4007 37.3334 32.0007 36.7334 32.0007 36C32.0007 35.2667 31.4007 34.6667 30.6673 34.6667ZM30.6673 39.3334C30.294 39.3334 30.0007 39.6267 30.0007 40C30.0007 40.3734 30.294 40.6667 30.6673 40.6667C31.0407 40.6667 31.334 40.3734 31.334 40C31.334 39.6267 31.0407 39.3334 30.6673 39.3334ZM25.334 23.3334C24.2273 23.3334 23.334 24.2267 23.334 25.3334C23.334 26.44 24.2273 27.3334 25.334 27.3334C26.4407 27.3334 27.334 26.44 27.334 25.3334C27.334 24.2267 26.4407 23.3334 25.334 23.3334ZM25.334 34.6667C24.6007 34.6667 24.0007 35.2667 24.0007 36C24.0007 36.7334 24.6007 37.3334 25.334 37.3334C26.0673 37.3334 26.6673 36.7334 26.6673 36C26.6673 35.2667 26.0673 34.6667 25.334 34.6667ZM30.6673 28.6667C29.5607 28.6667 28.6673 29.56 28.6673 30.6667C28.6673 31.7734 29.5607 32.6667 30.6673 32.6667C31.774 32.6667 32.6673 31.7734 32.6673 30.6667C32.6673 29.56 31.774 28.6667 30.6673 28.6667ZM30.6673 23.3334C29.5607 23.3334 28.6673 24.2267 28.6673 25.3334C28.6673 26.44 29.5607 27.3334 30.6673 27.3334C31.774 27.3334 32.6673 26.44 32.6673 25.3334C32.6673 24.2267 31.774 23.3334 30.6673 23.3334Z"
        fill="#969696"
      />
    </svg>
  );
};

================
File: components/icons/acmelogo.tsx
================
import React from "react";

export const AcmeLogo = () => (
  <svg
    className="bg-background border border-divider rounded-lg w-11 h-9"
    fill="none"
    height="42"
    viewBox="0 0 32 32"
    width="42"
    xmlns="http://www.w3.org/2000/svg"
  >
    <rect className="fill-background" height="100%" rx="16" width="100%" />
    <path
      className="fill-default-400"
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);

================
File: components/icons/community.tsx
================
import React from "react";

interface Props {
  color?: string;
}

export const Community = ({ color = "white" }: Props) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
    >
      <path
        className="fill-default-900"
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8.81658 8.09274C8.81658 8.47701 8.50641 8.78889 8.12423 8.78889C7.74204 8.78889 7.43187 8.47701 7.43187 8.09274C7.43187 5.55968 9.48125 3.5 12.0005 3.5C14.5188 3.5 16.5682 5.55968 16.5682 8.09274C16.5682 10.6258 14.5188 12.6855 12.0005 12.6855C10.9694 12.6855 9.99728 12.3523 9.19046 11.7211C8.88859 11.4853 8.83412 11.0481 9.0686 10.7446C9.30216 10.4402 9.7388 10.3863 10.0407 10.623C10.6019 11.0611 11.2795 11.2932 12.0005 11.2932C13.7563 11.2932 15.1835 9.85725 15.1835 8.09274C15.1835 6.32823 13.7563 4.8923 12.0005 4.8923C10.2447 4.8923 8.81658 6.32823 8.81658 8.09274ZM7.0207 10.9852C7.0207 11.3695 6.71052 11.6813 6.32834 11.6813C4.33527 11.6813 2.71331 10.0514 2.71331 8.04744C2.71331 6.04346 4.33527 4.41261 6.32834 4.41261C6.71052 4.41261 7.0207 4.72448 7.0207 5.10876C7.0207 5.49303 6.71052 5.80491 6.32834 5.80491C5.09871 5.80491 4.09803 6.81108 4.09803 8.04744C4.09803 9.28381 5.09871 10.289 6.32834 10.289C6.71052 10.289 7.0207 10.6009 7.0207 10.9852ZM5.03114 14.872C4.58618 14.9017 4.13938 14.9676 3.70273 15.066C3.03253 15.1988 2.57188 15.4252 2.4528 15.6759C2.36325 15.8661 2.36325 16.0861 2.4528 16.2764C2.51003 16.3961 2.74267 16.6941 3.69073 16.8899C4.06553 16.967 4.30647 17.3346 4.22985 17.7114C4.16338 18.0409 3.87444 18.2674 3.55226 18.2674C3.50611 18.2674 3.45995 18.2628 3.41287 18.2535C2.26725 18.0177 1.52412 17.5536 1.20286 16.8742C0.93238 16.3033 0.93238 15.6489 1.20286 15.0781C1.52781 14.3922 2.27278 13.929 3.41748 13.7025C3.90583 13.593 4.42371 13.5178 4.9379 13.4835C5.30716 13.4547 5.64965 13.7471 5.67549 14.1304C5.70134 14.5147 5.41332 14.847 5.03114 14.872ZM17.6833 10.3117C17.3011 10.3117 16.9909 10.6236 16.9909 11.0078C16.9909 11.3921 17.3011 11.704 17.6833 11.704C19.6717 11.704 21.29 10.0769 21.29 8.07752C21.29 6.07724 19.6717 4.45103 17.6833 4.45103C17.3011 4.45103 16.9909 4.76198 16.9909 5.14719C16.9909 5.53146 17.3011 5.84334 17.6833 5.84334C18.9083 5.84334 19.9053 6.84579 19.9053 8.07752C19.9053 9.30924 18.9083 10.3117 17.6833 10.3117ZM20.6028 13.7196C21.73 13.9442 22.4731 14.4055 22.7971 15.0878C23.0676 15.6586 23.0676 16.312 22.7971 16.8829C22.4768 17.5596 21.7355 18.0227 20.5917 18.2594C20.5456 18.2696 20.4985 18.2743 20.4514 18.2743C20.1302 18.2743 19.8422 18.0469 19.7748 17.7183C19.6981 17.3414 19.9391 16.9729 20.3139 16.8959C21.2583 16.7 21.4909 16.403 21.5472 16.2842C21.6367 16.0949 21.6367 15.8767 21.5472 15.6874C21.429 15.4377 20.9702 15.2121 20.3185 15.0822C19.8652 14.9819 19.4184 14.916 18.9772 14.8863C18.595 14.8613 18.307 14.528 18.3328 14.1447C18.3577 13.7614 18.691 13.4773 19.0695 13.4977C19.5818 13.5321 20.0969 13.6073 20.6028 13.7196ZM12.0002 14.126C10.333 14.126 5.26036 14.126 5.26036 17.3218C5.26036 18.0431 5.54284 19.0418 6.88878 19.7055C7.30235 19.9078 7.80269 20.073 8.37689 20.1965C8.74892 20.28 9.11817 20.0368 9.19757 19.6609C9.27788 19.285 9.03878 18.9146 8.66491 18.8348C8.20149 18.7355 7.80823 18.6074 7.49806 18.4542C6.742 18.082 6.64507 17.6541 6.64507 17.3218C6.64507 15.8311 9.55759 15.5183 12.0002 15.5183C15.5543 15.5183 17.3554 16.1189 17.3554 17.3051C17.3554 18.7949 14.4429 19.1077 12.0002 19.1077C11.618 19.1077 11.3079 19.4196 11.3079 19.8038C11.3079 20.1881 11.618 20.5 12.0002 20.5C13.6674 20.5 18.7401 20.5 18.7401 17.3051C18.7401 14.126 13.8438 14.126 12.0002 14.126Z"
        fill="#200E32"
      />
    </svg>
  );
};

================
File: components/icons/Icons.tsx
================
import React from "react";
import { useIconColor, useIconColorBackground } from "./IconSwitch";

// List of icons
// - Calendar03Icon
// - SourceCodeSquareIcon
// - CloudServerIcon
// - Note05Icon
// - Clip
// - TrelloIcon
// - SearchIcon
// - EditIcon
// - ViewIcon
// - UnlinkIcon
// - BookmarkIcon
// - MoonIcon
// - SunIcon
// - NotificationIcon
// - TestIcon
// - DashboardIcon
// - PinCode
// - DocIcon
// - ImgIcon
// - XLSIcon
// - PDFIcon
// - EdgeStyleIcon
// - TitleOnlyIcon
// - DownloadIcon
// - ExternalLinkIcon
// - FilterIcon
// - FloppyDiskIcon
// - FolderOpenIcon
// - CommandLineIcon
// - SourceCodeIcon
// - TaskIcon
// - ReminderIcon
// - DatabaseSyncIcon
// - BubbleChatEditIcon
// - GitBranchIcon
// - SettingsIcon
// - NotEqualSignCircleIcon
// - EqualSignCircleIcon
// - CloudUploadIcon
// - DeleteIcon
// - TxtIcon
// - UnknownFileIcon
// - AlertCircleIcon
// - AlertTriangleIcon
// - ChartIcon
// - TrashIcon
// - LinkIcon
// - PlusIcon

export const Calendar03Icon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path d="M18 2V4M6 2V4" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <path
        d="M11.9955 13H12.0045M11.9955 17H12.0045M15.991 13H16M8 13H8.00897M8 17H8.00897"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M3.5 8H20.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <path
        d="M2.5 12.2432C2.5 7.88594 2.5 5.70728 3.75212 4.35364C5.00424 3 7.01949 3 11.05 3H12.95C16.9805 3 18.9958 3 20.2479 4.35364C21.5 5.70728 21.5 7.88594 21.5 12.2432V12.7568C21.5 17.1141 21.5 19.2927 20.2479 20.6464C18.9958 22 16.9805 22 12.95 22H11.05C7.01949 22 5.00424 22 3.75212 20.6464C2.5 19.2927 2.5 17.1141 2.5 12.7568V12.2432Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M3 8H21" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

export const SourceCodeSquareIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M16 10L17.2265 11.0572C17.7422 11.5016 18 11.7239 18 12C18 12.2761 17.7422 12.4984 17.2265 12.9428L16 14"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M8 10L6.77346 11.0572C6.25782 11.5016 6 11.7239 6 12C6 12.2761 6.25782 12.4984 6.77346 12.9428L8 14"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M13 9L11 15" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <path
        d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </svg>
  );
};

export const CloudServerIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M17.4776 8.00005C17.485 8.00002 17.4925 8 17.5 8C19.9853 8 22 10.0147 22 12.5C22 14.9853 19.9853 17 17.5 17H7C4.23858 17 2 14.7614 2 12C2 9.40034 3.98398 7.26407 6.52042 7.0227M17.4776 8.00005C17.4924 7.83536 17.5 7.66856 17.5 7.5C17.5 4.46243 15.0376 2 12 2C9.12324 2 6.76233 4.20862 6.52042 7.0227M17.4776 8.00005C17.3753 9.1345 16.9286 10.1696 16.2428 11M6.52042 7.0227C6.67826 7.00768 6.83823 7 7 7C8.12582 7 9.16474 7.37209 10.0005 8"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M14 20.75V20.5C14 19.9477 13.5523 19.5 13 19.5H12M14 20.75V21C14 21.5523 13.5523 22 13 22H11C10.4477 22 10 21.5523 10 21V20.75M14 20.75H19M10 20.75V20.5C10 19.9477 10.4477 19.5 11 19.5H12M10 20.75H5M12 19.5V17"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const Note05Icon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M17 2V4M12 2V4M7 2V4"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M3.5 13V9C3.5 6.17157 3.5 4.75736 4.37868 3.87868C5.25736 3 6.67157 3 9.5 3H14.5C17.3284 3 18.7426 3 19.6213 3.87868C20.5 4.75736 20.5 6.17157 20.5 9V13C20.5 15.8284 20.5 17.2426 19.6213 18.1213C18.7426 19 17.3284 19 14.5 19H9.5C6.67157 19 5.25736 19 4.37868 18.1213C3.5 17.2426 3.5 15.8284 3.5 13Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M3.5 16V9C3.5 6.17157 3.5 4.75736 4.37868 3.87868C5.25736 3 6.67157 3 9.5 3H14.5C17.3284 3 18.7426 3 19.6213 3.87868C20.5 4.75736 20.5 6.17157 20.5 9V16C20.5 18.8284 20.5 20.2426 19.6213 21.1213C18.7426 22 17.3284 22 14.5 22H9.5C6.67157 22 5.25736 22 4.37868 21.1213C3.5 20.2426 3.5 18.8284 3.5 16Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path d="M8 15H12M8 10H16" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
    </svg>
  );
};

export const Clip = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M8 8.00049V6.00049C8 3.79135 9.79086 2.00049 12 2.00049C14.2091 2.00049 16 3.79135 16 6.00049V18.0005C16 20.2096 14.2091 22.0005 12 22.0005C9.79086 22.0005 8 20.2096 8 18.0005V13.5005C8 12.1198 9.11929 11.0005 10.5 11.0005C11.8807 11.0005 13 12.1198 13 13.5005V16.0005"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const TrelloIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color="#0079BF"
      fill={"none"}
      {...props}>
      <path
        d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
      <path
        d="M6 8C6 7.05719 6 6.58579 6.29289 6.29289C6.58579 6 7.05719 6 8 6H8.5C9.44281 6 9.91421 6 10.2071 6.29289C10.5 6.58579 10.5 7.05719 10.5 8V15C10.5 15.9428 10.5 16.4142 10.2071 16.7071C9.91421 17 9.44281 17 8.5 17H8C7.05719 17 6.58579 17 6.29289 16.7071C6 16.4142 6 15.9428 6 15V8Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M13.5 8C13.5 7.05719 13.5 6.58579 13.7929 6.29289C14.0858 6 14.5572 6 15.5 6H16C16.9428 6 17.4142 6 17.7071 6.29289C18 6.58579 18 7.05719 18 8V10C18 10.9428 18 11.4142 17.7071 11.7071C17.4142 12 16.9428 12 16 12H15.5C14.5572 12 14.0858 12 13.7929 11.7071C13.5 11.4142 13.5 10.9428 13.5 10V8Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </svg>
  );
};

export const SearchIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path d="M17.5 17.5L22 22" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <path
        d="M20 11C20 6.02944 15.9706 2 11 2C6.02944 2 2 6.02944 2 11C2 15.9706 6.02944 20 11 20C15.9706 20 20 15.9706 20 11Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const EditIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M14.0737 3.88545C14.8189 3.07808 15.1915 2.6744 15.5874 2.43893C16.5427 1.87076 17.7191 1.85309 18.6904 2.39232C19.0929 2.6158 19.4769 3.00812 20.245 3.79276C21.0131 4.5774 21.3972 4.96972 21.6159 5.38093C22.1438 6.37312 22.1265 7.57479 21.5703 8.5507C21.3398 8.95516 20.9446 9.33578 20.1543 10.097L10.7506 19.1543C9.25288 20.5969 8.504 21.3182 7.56806 21.6837C6.63212 22.0493 5.6032 22.0224 3.54536 21.9686L3.26538 21.9613C2.63891 21.9449 2.32567 21.9367 2.14359 21.73C1.9615 21.5234 1.98636 21.2043 2.03608 20.5662L2.06308 20.2197C2.20301 18.4235 2.27297 17.5255 2.62371 16.7182C2.97444 15.9109 3.57944 15.2555 4.78943 13.9445L14.0737 3.88545Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
      <path d="M13 4L20 11" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round" />
      <path d="M14 22L22 22" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

export const ViewIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M21.544 11.045C21.848 11.4713 22 11.6845 22 12C22 12.3155 21.848 12.5287 21.544 12.955C20.1779 14.8706 16.6892 19 12 19C7.31078 19 3.8221 14.8706 2.45604 12.955C2.15201 12.5287 2 12.3155 2 12C2 11.6845 2.15201 11.4713 2.45604 11.045C3.8221 9.12944 7.31078 5 12 5C16.6892 5 20.1779 9.12944 21.544 11.045Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15C13.6569 15 15 13.6569 15 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </svg>
  );
};

export const UnlinkIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M16.8463 14.6095L19.4558 12C21.5147 9.94113 21.5147 6.60303 19.4558 4.54416C17.397 2.48528 14.0589 2.48528 12 4.54416L9.39045 7.1537M14.6095 16.8463L12 19.4558C9.94113 21.5147 6.60303 21.5147 4.54416 19.4558C2.48528 17.397 2.48528 14.0589 4.54416 12L7.1537 9.39045"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path
        d="M22 17H19.9211M17 22L17 19.9211"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M2 7H4.07889M7 2L7 4.07889"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const BookmarkIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M4 17.9808V9.70753C4 6.07416 4 4.25748 5.17157 3.12874C6.34315 2 8.22876 2 12 2C15.7712 2 17.6569 2 18.8284 3.12874C20 4.25748 20 6.07416 20 9.70753V17.9808C20 20.2867 20 21.4396 19.2272 21.8523C17.7305 22.6514 14.9232 19.9852 13.59 19.1824C12.8168 18.7168 12.4302 18.484 12 18.484C11.5698 18.484 11.1832 18.7168 10.41 19.1824C9.0768 19.9852 6.26947 22.6514 4.77285 21.8523C4 21.4396 4 20.2867 4 17.9808Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const MoonIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M21.5 14.0784C20.3003 14.7189 18.9301 15.0821 17.4751 15.0821C12.7491 15.0821 8.91792 11.2509 8.91792 6.52485C8.91792 5.06986 9.28105 3.69968 9.92163 2.5C5.66765 3.49698 2.5 7.31513 2.5 11.8731C2.5 17.1899 6.8101 21.5 12.1269 21.5C16.6849 21.5 20.503 18.3324 21.5 14.0784Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const SunIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M17 12C17 14.7614 14.7614 17 12 17C9.23858 17 7 14.7614 7 12C7 9.23858 9.23858 7 12 7C14.7614 7 17 9.23858 17 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M12 2C11.6227 2.33333 11.0945 3.2 12 4M12 20C12.3773 20.3333 12.9055 21.2 12 22M19.5 4.50271C18.9685 4.46982 17.9253 4.72293 18.0042 5.99847M5.49576 17.5C5.52865 18.0315 5.27555 19.0747 4 18.9958M5.00271 4.5C4.96979 5.03202 5.22315 6.0763 6.5 5.99729M18 17.5026C18.5315 17.4715 19.5747 17.7108 19.4958 18.9168M22 12C21.6667 11.6227 20.8 11.0945 20 12M4 11.5C3.66667 11.8773 2.8 12.4055 2 11.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
    </svg>
  );
};

export const NotificationIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M5.15837 11.491C5.08489 12.887 5.16936 14.373 3.92213 15.3084C3.34164 15.7438 3 16.427 3 17.1527C3 18.1508 3.7818 19 4.8 19H19.2C20.2182 19 21 18.1508 21 17.1527C21 16.427 20.6584 15.7438 20.0779 15.3084C18.8306 14.373 18.9151 12.887 18.8416 11.491C18.6501 7.85223 15.6438 5 12 5C8.35617 5 5.34988 7.85222 5.15837 11.491Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M10.5 3.125C10.5 3.95343 11.1716 5 12 5C12.8284 5 13.5 3.95343 13.5 3.125C13.5 2.29657 12.8284 2 12 2C11.1716 2 10.5 2.29657 10.5 3.125Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M15 19C15 20.6569 13.6569 22 12 22C10.3431 22 9 20.6569 9 19"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const TestIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M17 2V4M12 2V4M7 2V4"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M3.5 10C3.5 6.70017 3.5 5.05025 4.52513 4.02513C5.55025 3 7.20017 3 10.5 3H13.5C16.7998 3 18.4497 3 19.4749 4.02513C20.5 5.05025 20.5 6.70017 20.5 10V15C20.5 18.2998 20.5 19.9497 19.4749 20.9749C18.4497 22 16.7998 22 13.5 22H10.5C7.20017 22 5.55025 22 4.52513 20.9749C3.5 19.9497 3.5 18.2998 3.5 15V10Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M13.5 16H17" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M13.5 9H17" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path
        d="M7 10C7 10 7.5 10 8 11C8 11 9.58824 8.5 11 8"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M7 17C7 17 7.5 17 8 18C8 18 9.58824 15.5 11 15"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const DashboardIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M2 6C2 4.11438 2 3.17157 2.58579 2.58579C3.17157 2 4.11438 2 6 2C7.88562 2 8.82843 2 9.41421 2.58579C10 3.17157 10 4.11438 10 6V8C10 9.88562 10 10.8284 9.41421 11.4142C8.82843 12 7.88562 12 6 12C4.11438 12 3.17157 12 2.58579 11.4142C2 10.8284 2 9.88562 2 8V6Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M2 19C2 18.0681 2 17.6022 2.15224 17.2346C2.35523 16.7446 2.74458 16.3552 3.23463 16.1522C3.60218 16 4.06812 16 5 16H7C7.93188 16 8.39782 16 8.76537 16.1522C9.25542 16.3552 9.64477 16.7446 9.84776 17.2346C10 17.6022 10 18.0681 10 19C10 19.9319 10 20.3978 9.84776 20.7654C9.64477 21.2554 9.25542 21.6448 8.76537 21.8478C8.39782 22 7.93188 22 7 22H5C4.06812 22 3.60218 22 3.23463 21.8478C2.74458 21.6448 2.35523 21.2554 2.15224 20.7654C2 20.3978 2 19.9319 2 19Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M14 16C14 14.1144 14 13.1716 14.5858 12.5858C15.1716 12 16.1144 12 18 12C19.8856 12 20.8284 12 21.4142 12.5858C22 13.1716 22 14.1144 22 16V18C22 19.8856 22 20.8284 21.4142 21.4142C20.8284 22 19.8856 22 18 22C16.1144 22 15.1716 22 14.5858 21.4142C14 20.8284 14 19.8856 14 18V16Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M14 5C14 4.06812 14 3.60218 14.1522 3.23463C14.3552 2.74458 14.7446 2.35523 15.2346 2.15224C15.6022 2 16.0681 2 17 2H19C19.9319 2 20.3978 2 20.7654 2.15224C21.2554 2.35523 21.6448 2.74458 21.8478 3.23463C22 3.60218 22 4.06812 22 5C22 5.93188 22 6.39782 21.8478 6.76537C21.6448 7.25542 21.2554 7.64477 20.7654 7.84776C20.3978 8 19.9319 8 19 8H17C16.0681 8 15.6022 8 15.2346 7.84776C14.7446 7.64477 14.3552 7.25542 14.1522 6.76537C14 6.39782 14 5.93188 14 5Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </svg>
  );
};

export const PinCode = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={24}
      height={24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M4.07407 7.92857C5.23724 6.24613 5.81883 5.40491 6.65298 4.95245C7.48714 4.5 8.45645 4.5 10.3951 4.5H15.0864C17.8607 4.5 19.2478 4.5 20.2442 5.22227C20.6756 5.53495 21.046 5.93674 21.3342 6.4047C22 7.48566 22 8.99044 22 12C22 15.0096 22 16.5143 21.3342 17.5953C21.046 18.0633 20.6756 18.465 20.2442 18.7777C19.2478 19.5 17.8607 19.5 15.0864 19.5H10.3951C8.45645 19.5 7.48714 19.5 6.65298 19.0475C5.81883 18.5951 5.23724 17.7539 4.07407 16.0714L3.92593 15.8571C2.64198 14 2 13.0714 2 12C2 10.9286 2.64198 10 3.92593 8.14286L4.07407 7.92857Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M8.99981 12H9.00879"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M12.9998 12H13.0088"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16.9998 12H17.0088"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const DocIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M21 15.0163C20.9544 14.0244 20.2766 14 19.3571 14C17.9407 14 17.7059 14.3384 17.7059 15.6667V17.3333C17.7059 18.6616 17.9407 19 19.3571 19C20.2766 19 20.9544 18.9756 21 17.9837M10.2949 16.5C10.2949 17.8807 9.18876 19 7.82429 19C7.51642 19 7.36248 19 7.24782 18.933C6.9733 18.7726 7.00076 18.448 7.00076 18.1667V14.8333C7.00076 14.552 6.9733 14.2274 7.24782 14.067C7.36248 14 7.51642 14 7.82429 14C9.18876 14 10.2949 15.1193 10.2949 16.5ZM14 19C13.2236 19 12.8354 19 12.5941 18.7559C12.3529 18.5118 12.3529 18.119 12.3529 17.3333V15.6667C12.3529 14.881 12.3529 14.4882 12.5941 14.2441C12.8354 14 13.2236 14 14 14C14.7764 14 15.1646 14 15.4059 14.2441C15.6471 14.4882 15.6471 14.881 15.6471 15.6667V17.3333C15.6471 18.119 15.6471 18.5118 15.4059 18.7559C15.1646 19 14.7764 19 14 19Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path
        d="M19 11C19 10 19 9.4306 18.8478 9.06306C18.6955 8.69552 18.4065 8.40649 17.8284 7.82843L13.0919 3.09188C12.593 2.593 12.3436 2.34355 12.0345 2.19575C11.9702 2.165 11.9044 2.13772 11.8372 2.11401C11.5141 2 11.1614 2 10.4558 2C7.21082 2 5.58831 2 4.48933 2.88607C4.26731 3.06508 4.06508 3.26731 3.88607 3.48933C3 4.58831 3 6.21082 3 9.45584V14C3 17.7712 3 19.6569 4.17157 20.8284C5.34315 22 7.22876 22 11 22H19M12 2.5V3C12 5.82843 12 7.24264 12.8787 8.12132C13.7574 9 15.1716 9 18 9H18.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const ImgIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <circle cx="16.5" cy="7.5" r="1.5" stroke="currentColor" strokeWidth="1.5" />
      <path
        d="M16 22C15.3805 19.7749 13.9345 17.7821 11.8765 16.3342C9.65761 14.7729 6.87163 13.9466 4.01569 14.0027C3.67658 14.0019 3.33776 14.0127 3 14.0351"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
      <path
        d="M13 18C14.7015 16.6733 16.5345 15.9928 18.3862 16.0001C19.4362 15.999 20.4812 16.2216 21.5 16.6617"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const XLSIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M8 13L9.70791 15.5M9.70791 15.5L11.4158 18M9.70791 15.5L11.4158 13M9.70791 15.5L8 18M16.5619 18H15.7079C14.9028 18 14.5002 18 14.2501 17.7559C14 17.5118 14 17.119 14 16.3333V13M20.7281 13H19.779C19.3997 13 19.21 13 19.0604 13.0634C18.5577 13.2766 18.5578 13.7739 18.5579 14.2316V14.2684C18.5578 14.7261 18.5577 15.2234 19.0604 15.4366C19.21 15.5 19.3997 15.5 19.779 15.5C20.1583 15.5 20.3479 15.5 20.4975 15.5634C21.0002 15.7766 21.0001 16.2739 21 16.7316V16.7684C21.0001 17.2261 21.0002 17.7234 20.4975 17.9366C20.3479 18 20.1583 18 19.779 18H18.7452"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M15 22H10.7273C7.46607 22 5.83546 22 4.70307 21.2022C4.37862 20.9736 4.09058 20.7025 3.8477 20.3971C3 19.3313 3 17.7966 3 14.7273V12.1818C3 9.21865 3 7.73706 3.46894 6.55375C4.22281 4.65142 5.81714 3.15088 7.83836 2.44135C9.09563 2 10.6698 2 13.8182 2C15.6173 2 16.5168 2 17.2352 2.2522C18.3902 2.65765 19.3012 3.5151 19.732 4.60214C20 5.27832 20 6.12494 20 7.81818V10"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M3 12C3 10.1591 4.49238 8.66667 6.33333 8.66667C6.99912 8.66667 7.78404 8.78333 8.43137 8.60988C9.00652 8.45576 9.45576 8.00652 9.60988 7.43136C9.78333 6.78404 9.66667 5.99912 9.66667 5.33333C9.66667 3.49238 11.1591 2 13 2"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const PDFIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M19 11C19 10.1825 19 9.4306 18.8478 9.06306C18.6955 8.69552 18.4065 8.40649 17.8284 7.82843L13.0919 3.09188C12.593 2.593 12.3436 2.34355 12.0345 2.19575C11.9702 2.165 11.9044 2.13772 11.8372 2.11401C11.5141 2 11.1614 2 10.4558 2C7.21082 2 5.58831 2 4.48933 2.88607C4.26731 3.06508 4.06508 3.26731 3.88607 3.48933C3 4.58831 3 6.21082 3 9.45584V14C3 17.7712 3 19.6569 4.17157 20.8284C5.34315 22 7.22876 22 11 22H19M12 2.5V3C12 5.82843 12 7.24264 12.8787 8.12132C13.7574 9 15.1716 9 18 9H18.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M21 14H19C18.4477 14 18 14.4477 18 15V16.5M18 16.5V19M18 16.5H20.5M7 19V17M7 17V14H8.5C9.32843 14 10 14.6716 10 15.5C10 16.3284 9.32843 17 8.5 17H7ZM12.5 14H13.7857C14.7325 14 15.5 14.7462 15.5 15.6667V17.3333C15.5 18.2538 14.7325 19 13.7857 19H12.5V14Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const EdgeStyleIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path d="M3 6H21" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M3 10H10.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M13.5 10L21 10" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M3 14H7" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M10 14H14" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M17 14H21" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path
        d="M3 18H5.11765M8.29412 18H10.4118M13.5882 18H15.7059M18.8824 18H21"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
    </svg>
  );
};

export const TitleOnlyIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path d="M4 8.5L20 8.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <path d="M4 15.5L20 15.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

export const DownloadIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M12 14.5L12 4.5M12 14.5C11.2998 14.5 9.99153 12.5057 9.5 12M12 14.5C12.7002 14.5 14.0085 12.5057 14.5 12"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M20 16.5C20 18.982 19.482 19.5 17 19.5H7C4.518 19.5 4 18.982 4 16.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const ExternalLinkIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M11.0991 3.00012C7.45013 3.00669 5.53932 3.09629 4.31817 4.31764C3.00034 5.63568 3.00034 7.75704 3.00034 11.9997C3.00034 16.2424 3.00034 18.3638 4.31817 19.6818C5.63599 20.9999 7.75701 20.9999 11.9991 20.9999C16.241 20.9999 18.3621 20.9999 19.6799 19.6818C20.901 18.4605 20.9906 16.5493 20.9972 12.8998"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M20.556 3.49612L11.0487 13.0586M20.556 3.49612C20.062 3.00151 16.7343 3.04761 16.0308 3.05762M20.556 3.49612C21.05 3.99074 21.0039 7.32273 20.9939 8.02714"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const FilterIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M8.85746 12.5061C6.36901 10.6456 4.59564 8.59915 3.62734 7.44867C3.3276 7.09253 3.22938 6.8319 3.17033 6.3728C2.96811 4.8008 2.86701 4.0148 3.32795 3.5074C3.7889 3 4.60404 3 6.23433 3H17.7657C19.396 3 20.2111 3 20.672 3.5074C21.133 4.0148 21.0319 4.8008 20.8297 6.37281C20.7706 6.83191 20.6724 7.09254 20.3726 7.44867C19.403 8.60062 17.6261 10.6507 15.1326 12.5135C14.907 12.6821 14.7583 12.9567 14.7307 13.2614C14.4837 15.992 14.2559 17.4876 14.1141 18.2442C13.8853 19.4657 12.1532 20.2006 11.226 20.8563C10.6741 21.2466 10.0043 20.782 9.93278 20.1778C9.79643 19.0261 9.53961 16.6864 9.25927 13.2614C9.23409 12.9539 9.08486 12.6761 8.85746 12.5061Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const FloppyDiskIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M8 22V19C8 17.1144 8 16.1716 8.58579 15.5858C9.17157 15 10.1144 15 12 15C13.8856 15 14.8284 15 15.4142 15.5858C16 16.1716 16 17.1144 16 19V22"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
      <path d="M10 7H14" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <path
        d="M3 11.8584C3 7.28199 3 4.99376 4.38674 3.54394C4.43797 3.49038 4.49038 3.43797 4.54394 3.38674C5.99376 2 8.28199 2 12.8584 2C13.943 2 14.4655 2.00376 14.9628 2.18936C15.4417 2.3681 15.8429 2.70239 16.6452 3.37099L18.8411 5.20092C19.9027 6.08561 20.4335 6.52795 20.7168 7.13266C21 7.73737 21 8.42833 21 9.81025V13C21 16.7497 21 18.6246 20.0451 19.9389C19.7367 20.3634 19.3634 20.7367 18.9389 21.0451C17.6246 22 15.7497 22 12 22C8.25027 22 6.3754 22 5.06107 21.0451C4.6366 20.7367 4.26331 20.3634 3.95491 19.9389C3 18.6246 3 16.7497 3 13V11.8584Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </svg>
  );
};

export const FolderOpenIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M2.5 20V8.87695C2.5 7.58945 2.5 6.9457 2.78533 6.47048C2.9541 6.18939 3.18939 5.9541 3.47048 5.78533C3.9457 5.5 4.59449 5.5 5.89206 5.5C6.52339 5.5 6.83906 5.5 7.12612 5.58819C7.31759 5.64702 7.49914 5.73428 7.66469 5.84705C7.91289 6.01611 8.10859 6.26074 8.5 6.75C8.89141 7.23926 9.08711 7.48389 9.33531 7.65295C9.50086 7.76572 9.68241 7.85298 9.87388 7.91181C10.1609 8 10.4742 8 11.1008 8H15C16.4045 8 17.1067 8 17.6111 8.33706C17.8295 8.48298 18.017 8.67048 18.1629 8.88886C18.5 9.39331 18.5 10.0955 18.5 11.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M4.42028 14.0144L3.63368 16.0144C2.65618 18.4998 2.16743 19.7425 2.7524 20.6213C3.33737 21.5 4.65337 21.5 7.28537 21.5H15.1903C16.4249 21.5 17.0422 21.5 17.5295 21.1795C18.0169 20.859 18.2702 20.2865 18.7769 19.1415L19.6618 17.1415C20.7866 14.5992 21.349 13.3281 20.7679 12.4141C20.1868 11.5 18.8163 11.5 16.0752 11.5H8.07196C6.78232 11.5 6.1375 11.5 5.63811 11.8439C5.13872 12.1877 4.89924 12.7966 4.42028 14.0144Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M11.5 4.51456C12.4151 3.28409 13.6662 2.55594 15.5125 2.50161C16.1155 2.48386 16.7152 2.61395 17.2682 2.85544C18.5748 3.42601 19.4185 4.15644 20 5.5L21.5 3"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const CommandLineIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path d="M2.5 9H21.5" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round" />
      <path d="M6.99981 6H7.00879" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
      <path d="M10.9998 6H11.0088" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
      <path
        d="M16 13L17.2265 14.0572C17.7422 14.5016 18 14.7239 18 15C18 15.2761 17.7422 15.4984 17.2265 15.9428L16 17"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M8 13L6.77346 14.0572C6.25782 14.5016 6 14.7239 6 15C6 15.2761 6.25782 15.4984 6.77346 15.9428L8 17"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M13 12L11 18" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

export const SourceCodeIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M17 8L18.8398 9.85008C19.6133 10.6279 20 11.0168 20 11.5C20 11.9832 19.6133 12.3721 18.8398 13.1499L17 15"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M7 8L5.16019 9.85008C4.38673 10.6279 4 11.0168 4 11.5C4 11.9832 4.38673 12.3721 5.16019 13.1499L7 15"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M14.5 4L9.5 20" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

export const TaskIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M7.5 3.5C5.9442 3.54667 5.01661 3.71984 4.37477 4.36227C3.49609 5.24177 3.49609 6.6573 3.49609 9.48836L3.49609 15.9944C3.49609 18.8255 3.49609 20.241 4.37477 21.1205C5.25345 22 6.66767 22 9.49609 22L14.4961 22C17.3245 22 18.7387 22 19.6174 21.1205C20.4961 20.241 20.4961 18.8255 20.4961 15.9944V9.48836C20.4961 6.6573 20.4961 5.24177 19.6174 4.36228C18.9756 3.71984 18.048 3.54667 16.4922 3.5"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M7.49609 3.75C7.49609 2.7835 8.2796 2 9.24609 2H14.7461C15.7126 2 16.4961 2.7835 16.4961 3.75C16.4961 4.7165 15.7126 5.5 14.7461 5.5H9.24609C8.2796 5.5 7.49609 4.7165 7.49609 3.75Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
      <path d="M13.5 11H17" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path
        d="M7 12C7 12 7.5 12 8 13C8 13 9.58824 10.5 11 10"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M13.5 17H17" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M8 17H9" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

export const ReminderIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
      <path
        d="M11 7.5H17M8 7.5C8 7.77614 7.77614 8 7.5 8C7.22386 8 7 7.77614 7 7.5C7 7.22386 7.22386 7 7.5 7C7.77614 7 8 7.22386 8 7.5Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M11 12H17M8 12C8 12.2761 7.77614 12.5 7.5 12.5C7.22386 12.5 7 12.2761 7 12C7 11.7239 7.22386 11.5 7.5 11.5C7.77614 11.5 8 11.7239 8 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M11 16.5H17M8 16.5C8 16.7761 7.77614 17 7.5 17C7.22386 17 7 16.7761 7 16.5C7 16.2239 7.22386 16 7.5 16C7.77614 16 8 16.2239 8 16.5Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const DatabaseSyncIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M12.9999 17L14.0226 17.5944C14.5372 15.7277 16.5112 14.6199 18.4317 15.1201C19.4148 15.3761 20.1933 16.0039 20.65 16.806M21.9999 20L20.9773 19.4056C20.4627 21.2723 18.4887 22.3801 16.5682 21.8799C15.608 21.6298 14.8429 21.0251 14.3823 20.2496"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M21 13V11.5C21 7.02166 21 4.78249 19.6088 3.39124C18.2175 2 15.9783 2 11.5 2C7.02166 2 4.78249 2 3.39124 3.39124C2 4.78249 2 7.02166 2 11.5C2 15.9783 2 18.2175 3.39124 19.6088C4.61763 20.8351 6.50289 20.9805 10 20.9977H11"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path d="M2 11.5H21" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <path
        d="M12.5 6.5L16.5 6.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <circle
        cx="7.75"
        cy="6.5"
        r="1.25"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <circle
        cx="7.75"
        cy="16.5"
        r="1.25"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const BubbleChatEditIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M11.9955 12H12.0045M8 12H8.00897"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.5667C22 16.8499 17.5222 21.1334 12 21.1334C11.3507 21.1343 10.7032 21.0742 10.0654 20.9545C9.60633 20.8682 9.37678 20.8251 9.21653 20.8496C9.05627 20.8741 8.82918 20.9949 8.37499 21.2364C7.09014 21.9197 5.59195 22.161 4.15111 21.893C4.69874 21.2194 5.07275 20.4112 5.23778 19.5448C5.33778 19.0148 5.09 18.5 4.71889 18.1231C3.03333 16.4115 2 14.1051 2 11.5667C2 6.28357 6.47778 2 12 2C12.6849 2 13.3538 2.0659 14 2.19142"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M20.8386 2.47645L21.5309 3.16882C22.1167 3.7546 22.1167 4.70435 21.5309 5.29013L17.9035 8.9858C17.6182 9.27115 17.2532 9.46351 16.8565 9.53759L14.6084 10.0256C14.2534 10.1027 13.9373 9.78753 14.0134 9.43236L14.4919 7.19703C14.566 6.80035 14.7583 6.43535 15.0437 6.15L18.7173 2.47645C19.303 1.89066 20.2528 1.89066 20.8386 2.47645Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const GitBranchIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M7 19H13C15.8284 19 17.2426 19 18.1213 18.1213C19 17.2426 19 15.8284 19 13V10M19 10C19.7002 10 21.0085 11.9943 21.5 12.5M19 10C18.2998 10 16.9915 11.9943 16.5 12.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path d="M5 7L5 17" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
      <circle cx="5" cy="5" r="2" stroke="currentColor" strokeWidth="1.5" />
      <circle cx="19" cy="5" r="2" stroke="currentColor" strokeWidth="1.5" />
      <circle cx="5" cy="19" r="2" stroke="currentColor" strokeWidth="1.5" />
    </svg>
  );
};

export const SettingsIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M15.5 12C15.5 13.933 13.933 15.5 12 15.5C10.067 15.5 8.5 13.933 8.5 12C8.5 10.067 10.067 8.5 12 8.5C13.933 8.5 15.5 10.067 15.5 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M21.011 14.0965C21.5329 13.9558 21.7939 13.8854 21.8969 13.7508C22 13.6163 22 13.3998 22 12.9669V11.0332C22 10.6003 22 10.3838 21.8969 10.2493C21.7938 10.1147 21.5329 10.0443 21.011 9.90358C19.0606 9.37759 17.8399 7.33851 18.3433 5.40087C18.4817 4.86799 18.5509 4.60156 18.4848 4.44529C18.4187 4.28902 18.2291 4.18134 17.8497 3.96596L16.125 2.98673C15.7528 2.77539 15.5667 2.66972 15.3997 2.69222C15.2326 2.71472 15.0442 2.90273 14.6672 3.27873C13.208 4.73448 10.7936 4.73442 9.33434 3.27864C8.95743 2.90263 8.76898 2.71463 8.60193 2.69212C8.43489 2.66962 8.24877 2.77529 7.87653 2.98663L6.15184 3.96587C5.77253 4.18123 5.58287 4.28891 5.51678 4.44515C5.45068 4.6014 5.51987 4.86787 5.65825 5.4008C6.16137 7.3385 4.93972 9.37763 2.98902 9.9036C2.46712 10.0443 2.20617 10.1147 2.10308 10.2492C2 10.3838 2 10.6003 2 11.0332V12.9669C2 13.3998 2 13.6163 2.10308 13.7508C2.20615 13.8854 2.46711 13.9558 2.98902 14.0965C4.9394 14.6225 6.16008 16.6616 5.65672 18.5992C5.51829 19.1321 5.44907 19.3985 5.51516 19.5548C5.58126 19.7111 5.77092 19.8188 6.15025 20.0341L7.87495 21.0134C8.24721 21.2247 8.43334 21.3304 8.6004 21.3079C8.76746 21.2854 8.95588 21.0973 9.33271 20.7213C10.7927 19.2644 13.2088 19.2643 14.6689 20.7212C15.0457 21.0973 15.2341 21.2853 15.4012 21.3078C15.5682 21.3303 15.7544 21.2246 16.1266 21.0133L17.8513 20.034C18.2307 19.8187 18.4204 19.711 18.4864 19.5547C18.5525 19.3984 18.4833 19.132 18.3448 18.5991C17.8412 16.6616 19.0609 14.6226 21.011 14.0965Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
    </svg>
  );
};

export const NotEqualSignCircleIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="1.5" />
      <path
        d="M7 9.77778H17M7 14.2222H17M8.66667 17L15.3333 7"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
    </svg>
  );
};

export const EqualSignCircleIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={colorIcon}
      fill={"none"}
      {...props}>
      <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="1.5" />
      <path d="M8 9H16M8 15H16" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
    </svg>
  );
};

export const CloudUploadIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M17.4776 9.01106C17.485 9.01102 17.4925 9.01101 17.5 9.01101C19.9853 9.01101 22 11.0294 22 13.5193C22 15.8398 20.25 17.7508 18 18M17.4776 9.01106C17.4924 8.84606 17.5 8.67896 17.5 8.51009C17.5 5.46695 15.0376 3 12 3C9.12324 3 6.76233 5.21267 6.52042 8.03192M17.4776 9.01106C17.3753 10.1476 16.9286 11.1846 16.2428 12.0165M6.52042 8.03192C3.98398 8.27373 2 10.4139 2 13.0183C2 15.4417 3.71776 17.4632 6 17.9273M6.52042 8.03192C6.67826 8.01687 6.83823 8.00917 7 8.00917C8.12582 8.00917 9.16474 8.38194 10.0005 9.01101"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M12 13L12 21M12 13C11.2998 13 9.99153 14.9943 9.5 15.5M12 13C12.7002 13 14.0085 14.9943 14.5 15.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const DeleteIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M19.5 5.5L18.8803 15.5251C18.7219 18.0864 18.6428 19.3671 18.0008 20.2879C17.6833 20.7431 17.2747 21.1273 16.8007 21.416C15.8421 22 14.559 22 11.9927 22C9.42312 22 8.1383 22 7.17905 21.4149C6.7048 21.1257 6.296 20.7408 5.97868 20.2848C5.33688 19.3626 5.25945 18.0801 5.10461 15.5152L4.5 5.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path
        d="M3 5.5H21M16.0557 5.5L15.3731 4.09173C14.9196 3.15626 14.6928 2.68852 14.3017 2.39681C14.215 2.3321 14.1231 2.27454 14.027 2.2247C13.5939 2 13.0741 2 12.0345 2C10.9688 2 10.436 2 9.99568 2.23412C9.8981 2.28601 9.80498 2.3459 9.71729 2.41317C9.32164 2.7167 9.10063 3.20155 8.65861 4.17126L8.05292 5.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path d="M9.5 16.5L9.5 10.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M14.5 16.5L14.5 10.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
    </svg>
  );
};

export const TxtIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M12.3529 13L14 15.5M14 15.5L15.6471 18M14 15.5L15.6471 13M14 15.5L12.3529 18M17.7059 13H19.3529M19.3529 13H21M19.3529 13V18M7 13H8.64706M8.64706 13H10.2941M8.64706 13V18"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path
        d="M15 22H10.7273C7.46607 22 5.83546 22 4.70307 21.2022C4.37862 20.9736 4.09058 20.7025 3.8477 20.3971C3 19.3313 3 17.7966 3 14.7273V12.1818C3 9.21865 3 7.73706 3.46894 6.55375C4.22281 4.65142 5.81714 3.15088 7.83836 2.44135C9.09563 2 10.6698 2 13.8182 2C15.6173 2 16.5168 2 17.2352 2.2522C18.3902 2.65765 19.3012 3.5151 19.732 4.60214C20 5.27832 20 6.12494 20 7.81818V10"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M3 12C3 10.1591 4.49238 8.66667 6.33333 8.66667C6.99912 8.66667 7.78404 8.78333 8.43137 8.60988C9.00652 8.45576 9.45576 8.00652 9.60988 7.43136C9.78333 6.78404 9.66667 5.99912 9.66667 5.33333C9.66667 3.49238 11.1591 2 13 2"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const FileUnknownIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M7 11V11.5M5 4C5 2.89543 5.89543 2 7 2C8.07458 2 9 2.80976 9 3.91898C9 4.29783 8.88786 4.66821 8.67771 4.98344L7.5547 6.66795C7.19301 7.21049 7 7.84795 7 8.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M4 12L4 14.5442C4 17.7892 4 19.4117 4.88607 20.5107C5.06508 20.7327 5.26731 20.9349 5.48933 21.1139C6.58831 22 8.21082 22 11.4558 22C12.1614 22 12.5141 22 12.8372 21.886C12.9044 21.8623 12.9702 21.835 13.0345 21.8043C13.3436 21.6564 13.593 21.407 14.0919 20.9081L18.8284 16.1716C19.4065 15.5935 19.6955 15.3045 19.8478 14.9369C20 14.5694 20 14.1606 20 13.3431V10C20 6.22876 20 4.34315 18.8284 3.17157C17.6569 2 15.7712 2 12 2M13 21.5V21C13 18.1716 13 16.7574 13.8787 15.8787C14.7574 15 16.1716 15 19 15H19.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const AlertCircleIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="1.5" />
      <path d="M11.992 15H12.001" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
      <path d="M12 12L12 8" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

export const AlertTriangleIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M5.32171 9.6829C7.73539 5.41196 8.94222 3.27648 10.5983 2.72678C11.5093 2.42437 12.4907 2.42437 13.4017 2.72678C15.0578 3.27648 16.2646 5.41196 18.6783 9.6829C21.092 13.9538 22.2988 16.0893 21.9368 17.8293C21.7376 18.7866 21.2469 19.6548 20.535 20.3097C19.241 21.5 16.8274 21.5 12 21.5C7.17265 21.5 4.75897 21.5 3.46496 20.3097C2.75308 19.6548 2.26239 18.7866 2.06322 17.8293C1.70119 16.0893 2.90803 13.9538 5.32171 9.6829Z"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M12.2422 17V13C12.2422 12.5286 12.2422 12.2929 12.0957 12.1464C11.9493 12 11.7136 12 11.2422 12"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M11.992 8.99997H12.001"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const ChartIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path d="M7 17L7 13" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M12 17L12 7" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M17 17L17 11" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path
        d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export const TrashIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M19.5 5.5L18.8803 15.5251C18.7219 18.0864 18.6428 19.3671 18.0008 20.2879C17.6833 20.7431 17.2747 21.1273 16.8007 21.416C15.8421 22 14.559 22 11.9927 22C9.42312 22 8.1383 22 7.17905 21.4149C6.7048 21.1257 6.296 20.7408 5.97868 20.2848C5.33688 19.3626 5.25945 18.0801 5.10461 15.5152L4.5 5.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path
        d="M3 5.5H21M16.0557 5.5L15.3731 4.09173C14.9196 3.15626 14.6928 2.68852 14.3017 2.39681C14.215 2.3321 14.1231 2.27454 14.027 2.2247C13.5939 2 13.0741 2 12.0345 2C10.9688 2 10.436 2 9.99568 2.23412C9.8981 2.28601 9.80498 2.3459 9.71729 2.41317C9.32164 2.7167 9.10063 3.20155 8.65861 4.17126L8.05292 5.5"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path d="M9.5 16.5L9.5 10.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
      <path d="M14.5 16.5L14.5 10.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
    </svg>
  );
};

export const LinkIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColor();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path
        d="M10 13.229C10.1416 13.4609 10.3097 13.6804 10.5042 13.8828C11.7117 15.1395 13.5522 15.336 14.9576 14.4722C15.218 14.3121 15.4634 14.1157 15.6872 13.8828L18.9266 10.5114C20.3578 9.02184 20.3578 6.60676 18.9266 5.11718C17.4953 3.6276 15.1748 3.62761 13.7435 5.11718L13.03 5.85978"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path
        d="M10.9703 18.14L10.2565 18.8828C8.82526 20.3724 6.50471 20.3724 5.07345 18.8828C3.64218 17.3932 3.64218 14.9782 5.07345 13.4886L8.31287 10.1172C9.74413 8.62761 12.0647 8.6276 13.4959 10.1172C13.6904 10.3195 13.8584 10.539 14 10.7708"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
    </svg>
  );
};

export const PlusIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const colorIcon = useIconColorBackground();
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={props.width || 24}
      height={props.height || 24}
      color={props.color || colorIcon}
      fill={"none"}
      {...props}>
      <path d="M12 4V20M20 12H4" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
};

================
File: components/icons/IconSwitch.tsx
================
import { useTheme as useNextTheme } from "next-themes";

export const useIconColor = (): string => {
  const { resolvedTheme } = useNextTheme();
  return resolvedTheme === "dark" ? "#ffffff" : "#000000";
};

export const useIconColorBackground = (): string => {
  const { resolvedTheme } = useNextTheme();
  return resolvedTheme === "dark" ? "#000000" : "#ffffff";
};

================
File: components/language/__tests__/LocaleSwitcherSelect.test.tsx
================
import { render, screen, fireEvent } from "@testing-library/react";
import { useParams } from "next/navigation";
import LocaleSwitcherSelect from "@/components/language/LocaleSwitcherSelect";
import { ChangeEvent, ReactNode, useTransition, useState } from "react";
import { Locale, usePathname, useRouter } from "@/routing";

// Mockear el enrutador de Next.js
jest.mock("@/routing", () => ({
  useRouter: jest.fn(),
  usePathname: jest.fn(),
  useParams: jest.fn(),
}));

// En la parte superior de tu archivo de pruebas
jest.mock("next/navigation", () => ({
  useParams: jest.fn(),
  useRouter: jest.fn(),
  usePathname: jest.fn(),
}));

describe("LocaleSwitcherSelect", () => {
  let replaceMock: jest.Mock;

  beforeEach(() => {
    // Resetea los mocks antes de cada test
    replaceMock = jest.fn();
    (useRouter as jest.Mock).mockReturnValue({ replace: replaceMock });
    (usePathname as jest.Mock).mockReturnValue("/current-path");
    (useParams as jest.Mock).mockReturnValue({});
  });

  it("debe mostrar la bandera de UK si el idioma es 'en'", () => {
    render(<LocaleSwitcherSelect defaultValue="en" />);

    const imgElement = screen.getByAltText("UK Flag");
    expect(imgElement).toBeInTheDocument(); // Verifica que la bandera de UK estÃ¡ visible
  });

  it("debe cambiar el idioma de 'en' a 'es' cuando se hace clic en la bandera", () => {
    render(<LocaleSwitcherSelect defaultValue="en" />);

    const imgElement = screen.getByAltText("UK Flag");
    fireEvent.click(imgElement); // Simula el clic en la bandera

    expect(replaceMock).toHaveBeenCalledWith({ pathname: "/current-path", params: {} }, { locale: "es" });

    // Verifica que ahora se muestra la bandera de EspaÃ±a
    const newImgElement = screen.getByAltText("ES Flag");
    expect(newImgElement).toBeInTheDocument();
  });

  it("debe cambiar el idioma de 'es' a 'en' cuando se hace clic en la bandera", () => {
    render(<LocaleSwitcherSelect defaultValue="es" />);

    const imgElement = screen.getByAltText("ES Flag");
    fireEvent.click(imgElement); // Simula el clic en la bandera de EspaÃ±a

    expect(replaceMock).toHaveBeenCalledWith({ pathname: "/current-path", params: {} }, { locale: "en" });

    // Verifica que ahora se muestra la bandera de UK
    const newImgElement = screen.getByAltText("UK Flag");
    expect(newImgElement).toBeInTheDocument();
  });
});

================
File: components/language/LocaleSwitcherSelect.tsx
================
"use client";

import { useParams } from "next/navigation";
import { ChangeEvent, ReactNode, useTransition, useState } from "react";
import { Locale, usePathname, useRouter } from "@/routing";

type Props = {
  defaultValue: string;
};

export default function LocaleSwitcherSelect({ defaultValue }: Props) {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();
  const pathname = usePathname();
  const params = useParams();
  const [lang, setLang] = useState(defaultValue);

  function handleChangeLanguage(lang: string) {
    const nextLocale = lang as Locale;
    setLang(lang);
    startTransition(() => {
      router.replace(
        // @ts-expect-error -- TypeScript will validate that only known `params`
        // are used in combination with a given `pathname`. Since the two will
        // always match for the current route, we can skip runtime checks.
        { pathname, params },
        { locale: nextLocale }
      );
    });
  }

  return lang === "en" ? (
    <img src="/uk.png" alt="UK Flag" onClick={() => handleChangeLanguage("es")} className="cursor-pointer" />
  ) : (
    <img src="/spain.png" alt="ES Flag" onClick={() => handleChangeLanguage("en")} className="cursor-pointer" />
  );
}

================
File: components/layout/layout-context.ts
================
"use client";

import { createContext, useContext } from "react";

interface SidebarContext {
  collapsed: boolean;
  setCollapsed: () => void;
}

export const SidebarContext = createContext<SidebarContext>({
  collapsed: false,
  setCollapsed: () => {},
});

export const useSidebarContext = () => {
  return useContext(SidebarContext);
};

================
File: components/layout/layout.tsx
================
"use client";

import React from "react";
import { useLockedBody } from "@/components/hooks/useBodyLock";
import { NavbarWrapper } from "@/components/navbar/Navbar";
import { SidebarWrapper } from "@/components/sidebar/Sidebar";
import { SidebarContext } from "./layout-context";

interface Props {
  children: React.ReactNode;
}

export const Layout = ({ children }: Props) => {
  const [sidebarOpen, setSidebarOpen] = React.useState(false);
  const [_, setLocked] = useLockedBody(false);
  const handleToggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
    setLocked(!sidebarOpen);
  };

  return (
    <SidebarContext.Provider
      value={{
        collapsed: sidebarOpen,
        setCollapsed: handleToggleSidebar,
      }}>
      <section className="flex">
        <SidebarWrapper />
        <NavbarWrapper>{children}</NavbarWrapper>
      </section>
    </SidebarContext.Provider>
  );
};

================
File: components/navbar/modals/EqualChanger.tsx
================
import { NotEqualSignCircleIcon, EqualSignCircleIcon } from "@/components/icons/Icons";
import exp from "constants";
import { useState, useEffect } from "react";

interface EqualChangerProps {
  value: boolean;
  setValue: (value: boolean) => void;
}

export const EqualChanger = (props: EqualChangerProps) => {
  useEffect(() => {
    setEqual(props.value);
  }, [props]);
  const [equal, setEqual] = useState<boolean>(true);
  const handleClick = () => {
    setEqual(!equal);
    props.setValue(!equal);
  };
  if (equal) {
    return <EqualSignCircleIcon onClick={handleClick} width={24} height={24} className="cursor-pointer" />;
  } else {
    return <NotEqualSignCircleIcon onClick={handleClick} width={24} height={24} className="cursor-pointer" />;
  }
};

================
File: components/navbar/modals/FilterModal.tsx
================
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  Select,
  SelectItem,
  Tooltip,
  select,
} from "@nextui-org/react";
import { SrType, VttsSystem, ReleaseVersion, Stage, ServiceRequest, VttsUser, Status } from "@/helpers/interfaces";
import { FilterModalSkeleton } from "./FilterModalSkeleton";
import { useState, useEffect, ChangeEvent } from "react";
import { FloppyDiskIcon, FolderOpenIcon } from "@/components/icons/Icons";
import { EqualChanger } from "./EqualChanger";
import { useDataStore } from "@/helpers/data-store";
import { InfoAlert } from "@/components/alert/InfoAlert";
import { useAlert } from "@/helpers/alert-context";

interface FilterModalProps {
  isOpen: boolean;
  onOpen: () => void;
  onOpenChange: (open: boolean) => void;
  onClose: () => void;
}

interface SelectValue {
  key: string;
  value: string;
}

interface LastRelease {
  id: number;
  app: number;
  releaseVersion: number;
  stage: number;
}

interface SRFilters {
  filter1: string;
  filter2: string;
}

export const FilterModal: React.FC<FilterModalProps> = (props) => {
  const { testPssSystem, setTestPssSystem } = useDataStore();
  const { id: userID } = JSON.parse(localStorage.getItem("user") || "{}");
  const [userFilters, setUserFilters] = useState<SRFilters>();
  const { showAlert, alert } = useAlert();

  const [srTypes, setSrTypes] = useState<SelectValue[]>([]);
  const [selectedSrType, setSelectedSrType] = useState("0");
  const [systems, setSystems] = useState<SelectValue[]>([]);
  const [selectedSystem, setSelectedSystem] = useState("0");
  const [releaseVersions, setReleaseVersions] = useState<SelectValue[]>([]);
  const [selectedReleaseVersion, setSelectedReleaseVersion] = useState("all");
  const [stageVersions, setStageVersions] = useState<SelectValue[]>([]);
  const [selectedStageVersion, setSelectedStageVersion] = useState("0");
  const [serviceRequests, setServiceRequests] = useState<SelectValue[]>([]);
  const [selectedServiceRequest, setSelectedServiceRequest] = useState("all");
  const [users, setUsers] = useState<SelectValue[]>([]);
  const [selectedUser, setSelectedUser] = useState("0");
  const [loaded, setLoaded] = useState(false);
  const [selectedReleaseNote, setSelectedReleaseNote] = useState("all");
  const [systemStatuses, setSystemStatuses] = useState<SelectValue[]>([]);
  const [selectedSystemStatus, setSelectedSystemStatus] = useState("0");

  const [equalType, setEqualType] = useState(true);
  const [equalStageVersion, setEqualStageVersion] = useState(true);
  const [equalUser, setEqualUser] = useState(true);
  const [equalSystemStatus, setEqualSystemStatus] = useState(true);

  const [lastRelease, setLastRelease] = useState<LastRelease>();

  const [isLoadingSF1, setIsLoadingSF1] = useState(false);
  const [isLoadingSF2, setIsLoadingSF2] = useState(false);
  const [isLoadingLF2, setIsLoadingLF2] = useState(false);
  const [isLoadingLF1, setIsLoadingLF1] = useState(false);

  const releaseNotes = [
    { key: "all", value: "All" },
    { key: "yes", value: "YES" },
    { key: "no", value: "NO" },
  ];

  const fetchSrTypes = async () => {
    try {
      const response = await fetch("/api/v1/srType", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: SrType) => ({ key: item.id, value: item.srType }));
      let dataAux = [{ key: 0, value: "All" }, ...data];
      setSrTypes(dataAux);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };
  const fetchSystem = async () => {
    try {
      const response = await fetch("/api/v1/system", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: VttsSystem) => ({ key: item.id, value: item.app }));
      let dataAux = [{ key: 0, value: "All" }, ...data];
      setSystems(dataAux);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const fetchReleaseVersion = async () => {
    try {
      const response = await fetch("/api/v1/systemVersion?distinct=true", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: ReleaseVersion) => ({ key: item.version, value: item.version }));
      let dataAux = [{ key: "all", value: "All" }, ...data];
      setReleaseVersions(dataAux);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const fetchStage = async () => {
    try {
      const response = await fetch("/api/v1/stageVersion", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: Stage) => ({ key: item.id, value: item.stage }));
      let dataAux = [{ key: 0, value: "All" }, ...data];
      setStageVersions(dataAux);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const fetchServiceRequests = async () => {
    try {
      const response = await fetch("/api/v1/serviceRequest?distinct=true", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: ServiceRequest) => ({ key: item.srNumber, value: item.srNumber }));
      let dataAux = [{ key: "all", value: "All" }, ...data];
      setServiceRequests(dataAux);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const fetchUser = async () => {
    try {
      const response = await fetch(`/api/v1/users/${userID}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      const newFilters = {
        filter1: data.srFilter1,
        filter2: data.srFilter2,
      };
      setUserFilters(newFilters);
      return newFilters; // Retorna los filtros actualizados
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const fetchUsers = async () => {
    try {
      const response = await fetch("/api/v1/users", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: VttsUser) => (item.id != userID ? { key: item.id, value: item.assigned } : null));
      let dataAux = [
        { key: 0, value: "All" },
        { key: 999, value: "Unassigned" },
        { key: userID, value: "My SRs" },
        ...data,
      ];
      setUsers(dataAux);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };
  const fetchSystemStatuses = async () => {
    try {
      const response = await fetch("/api/v1/systemStatus", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: Status) => ({ key: item.id, value: item.descStatus }));
      let dataAux = [{ key: 0, value: "All" }, ...data];
      setSystemStatuses(dataAux);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const fetchLastRelease = async () => {
    try {
      const response = await fetch("/api/v1/releaseVersion?orderBy=id&orderType=desc&limit=1", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      setLastRelease({
        id: data[0].id,
        app: data[0].app,
        releaseVersion: data[0].releaseVersion,
        stage: data[0].stage,
      });
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const clearFilter = () => {
    setSelectedSrType("0");
    setSelectedSystem("0");
    setSelectedReleaseVersion("all");
    setSelectedStageVersion("0");
    setSelectedServiceRequest("all");
    setSelectedUser("0");
    setSelectedSystemStatus("0");
    setSelectedReleaseNote("all");
  };

  const handleLastRelease = async () => {
    let filter = "?";
    if (lastRelease) {
      filter += `system=${lastRelease.app}&`;
      filter += `systemVersionId=${lastRelease.releaseVersion}&`;
      filter += `stageVersion=${lastRelease.stage}&`;
    }
    try {
      const response = await fetch("/api/v1/testPssSystem" + filter, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      setTestPssSystem(data);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const handleSelectionChange = (select: string, value: string) => {
    switch (select) {
      case "srType":
        setSelectedSrType(value);
        break;
      case "system":
        setSelectedSystem(value);
        break;
      case "systemVersion":
        setSelectedReleaseVersion(value);
        break;
      case "stageVersion":
        setSelectedStageVersion(value);
        break;
      case "serviceRequest":
        setSelectedServiceRequest(value);
        break;
      case "user":
        setSelectedUser(value);
        break;
      case "releaseNote":
        setSelectedReleaseNote(value);
        break;
      case "systemStatus":
        setSelectedSystemStatus(value);
        break;
      default:
        break;
    }
  };

  const applyFilter = async () => {
    let filter = "?";
    if (selectedSrType !== "0") {
      filter += `srType=${selectedSrType}&`;
      filter += `equalType=${equalType}&`;
    }

    if (selectedSystem !== "0") {
      filter += `system=${selectedSystem}&`;
    }
    if (selectedReleaseVersion !== "all") {
      filter += `systemVersion=${selectedReleaseVersion}&`;
    }
    if (selectedStageVersion !== "0") {
      filter += `stageVersion=${selectedStageVersion}&`;
      filter += `equalStageVersion=${equalStageVersion}&`;
    }

    if (selectedServiceRequest !== "all") {
      filter += `serviceRequest=${selectedServiceRequest}&`;
    }
    if (selectedUser !== "0") {
      filter += `user=${selectedUser}&`;
      filter += `equalUser=${equalUser}&`;
    }

    if (selectedSystemStatus !== "0") {
      filter += `systemStatus=${selectedSystemStatus}&`;
      filter += `equalSystemStatus=${equalSystemStatus}&`;
    }

    if (selectedReleaseNote !== "all") {
      filter += `releaseNote=${selectedReleaseNote}&`;
    }

    try {
      const response = await fetch("/api/v1/testPssSystem" + filter, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      setTestPssSystem(data);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const saveFilter = async (filter: string) => {
    filter === "one" ? setIsLoadingSF1(true) : setIsLoadingSF2(true);
    let body;
    const bodyJSON = JSON.stringify({
      srType: selectedSrType,
      srTypeEqual: equalType,
      system: selectedSystem,
      systemVersion: selectedReleaseVersion,
      stageVersion: selectedStageVersion,
      equalStage: equalStageVersion,
      serviceRequest: selectedServiceRequest,
      user: selectedUser,
      equalUser: equalUser,
      systemStatus: selectedSystemStatus,
      equalSystemStatus: equalSystemStatus,
      releaseNote: selectedReleaseNote,
    });

    if (filter === "one") {
      body = JSON.stringify({
        filter1: bodyJSON,
      });
    } else {
      body = JSON.stringify({
        filter2: bodyJSON,
      });
    }

    const response = fetch(`/api/v1/users/${userID}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: body,
    });
    await response.then(() => {
      setTimeout(() => {
        filter === "one" ? setIsLoadingSF1(false) : setIsLoadingSF2(false);
      }, 250);
    });
  };
  const loadFilter = async (filter: string) => {
    filter === "one" ? setIsLoadingLF1(true) : setIsLoadingLF2(true);
    const response = await fetchUser();
    const filters = filter === "one" ? response?.filter1 : response?.filter2;

    if (filters) {
      const unescapedFilters = JSON.parse(`"${filters}"`);
      const data = JSON.parse(unescapedFilters);
      setSelectedSrType(data.srType);
      setEqualType(data.srTypeEqual);
      setSelectedSystem(data.system);
      setSelectedReleaseVersion(data.systemVersion);
      setSelectedStageVersion(data.stageVersion);
      setEqualStageVersion(data.equalStage);
      setSelectedServiceRequest(data.serviceRequest);
      setSelectedUser(data.user);
      setEqualUser(data.equalUser);
      setSelectedSystemStatus(data.systemStatus);
      setEqualSystemStatus(data.equalSystemStatus);
      setSelectedReleaseNote(data.releaseNote);
    }
    setTimeout(() => {
      filter === "one" ? setIsLoadingLF1(false) : setIsLoadingLF2(false);
    }, 250);
  };

  useEffect(() => {
    if (props.isOpen) {
      fetchSrTypes();
      fetchSystem();
      fetchReleaseVersion();
      fetchStage();
      fetchServiceRequests();
      fetchUsers();
      fetchSystemStatuses();
      fetchLastRelease();
      setTimeout(() => {
        setLoaded(true);
      }, 750);
    }
  }, [props.isOpen]);
  return (
    <Modal isOpen={props.isOpen} onOpenChange={props.onOpenChange} placement="top" size="3xl">
      <ModalContent>
        {(onClose) => (
          <>
            <ModalHeader className="flex flex-col gap-1">Test Release Filter</ModalHeader>
            <ModalBody>
              {!loaded ? (
                <FilterModalSkeleton />
              ) : (
                <>
                  <div className="flex flex-row gap-2">
                    <Select
                      label="Type"
                      items={srTypes}
                      className="max-w-xs w-2/12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedSrType]}
                      startContent={<EqualChanger value={equalType} setValue={setEqualType} />}
                      onChange={(event) => handleSelectionChange("srType", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                    <Select
                      label="App"
                      items={systems}
                      className="max-w-xs w-3/12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedSystem]}
                      onChange={(event) => handleSelectionChange("system", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                    <Select
                      label="Version"
                      items={releaseVersions}
                      className="max-w-xs w-2/12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedReleaseVersion]}
                      onChange={(event) => handleSelectionChange("systemVersion", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                    <Select
                      label="Stage"
                      items={stageVersions}
                      className="max-w-xs w-24"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedStageVersion]}
                      startContent={<EqualChanger value={equalStageVersion} setValue={setEqualStageVersion} />}
                      onChange={(event) => handleSelectionChange("stageVersion", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                    <Select
                      label="Assigned"
                      items={users}
                      className="max-w-xs w-3/12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedUser]}
                      startContent={<EqualChanger value={equalUser} setValue={setEqualUser} />}
                      onChange={(event) => handleSelectionChange("user", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                  </div>
                  <div className="flex flex-row gap-2">
                    <Select
                      label="Service Request"
                      items={serviceRequests}
                      className="max-w-xs w-6/12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedServiceRequest]}
                      onChange={(event) => handleSelectionChange("serviceRequest", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                    <Select
                      label="Test Status"
                      items={systemStatuses}
                      className="max-w-xs w-4/12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedSystemStatus]}
                      startContent={<EqualChanger value={equalSystemStatus} setValue={setEqualSystemStatus} />}
                      onChange={(event) => handleSelectionChange("systemStatus", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                    <Select
                      label="Release Note"
                      items={releaseNotes}
                      className="max-w-xs w-2/12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedReleaseNote]}
                      onChange={(event) => handleSelectionChange("releaseNote", event.target.value)}>
                      {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
                    </Select>
                  </div>
                </>
              )}
            </ModalBody>
            <ModalFooter>
              <div className=" flex justify-start w-5/12 gap-1 align-middle">
                <div className="align-middle">
                  <Button
                    size="sm"
                    onClick={() => loadFilter("one")}
                    className="bg-amber-300"
                    isLoading={isLoadingLF1}
                    isIconOnly>
                    <FolderOpenIcon width={15} height={15} />
                  </Button>
                </div>
                <div>
                  <Button
                    size="sm"
                    onClick={() => saveFilter("one")}
                    className="bg-green-400"
                    isLoading={isLoadingSF1}
                    isIconOnly>
                    <FloppyDiskIcon width={15} height={15} />
                  </Button>
                </div>
                <div>
                  <Button
                    size="sm"
                    onClick={() => loadFilter("two")}
                    className="bg-amber-300"
                    isLoading={isLoadingLF2}
                    isIconOnly>
                    <FolderOpenIcon width={15} height={15} />
                  </Button>
                </div>
                <div>
                  <Button
                    size="sm"
                    onClick={() => saveFilter("two")}
                    className="bg-green-400"
                    isLoading={isLoadingSF2}
                    isIconOnly>
                    <FloppyDiskIcon width={15} height={15} />
                  </Button>
                </div>
              </div>
              <div className=" flex gap-2 justify-center w-4/12">
                <Button size="sm" color="default" onPress={props.onClose} onClick={handleLastRelease}>
                  Last Release
                </Button>
              </div>
              <div className=" flex flex-row gap-2 justify-end w-3/12">
                <Button size="sm" color="danger" variant="flat" onClick={clearFilter}>
                  Clear
                </Button>
                <Button size="sm" color="primary" onPress={props.onClose} onClick={applyFilter}>
                  Apply
                </Button>
              </div>
            </ModalFooter>
          </>
        )}
      </ModalContent>
    </Modal>
  );
};

================
File: components/navbar/modals/FilterModalSkeleton.tsx
================
import { Skeleton } from "@nextui-org/react";

export const FilterModalSkeleton = () => {
  return (
    <>
      <div className="flex flex-row gap-2 max-h-12">
        <div className=" rounded-lg max-h-12 max-w-xs w-2/12">
          <Skeleton className="rounded-lg h-12" />
        </div>
        <div className="h-48 rounded-lg h-12 max-w-xs w-3/12">
          {" "}
          <Skeleton className="rounded-lg h-12" />
        </div>
        <div className="h-48 rounded-lg h-12 max-w-xs w-2/12">
          {" "}
          <Skeleton className="rounded-lg h-12" />
        </div>
        <div className="h-48 rounded-lg h-12 max-w-xs w-24">
          {" "}
          <Skeleton className="rounded-lg h-12" />
        </div>
        <div className="h-48 rounded-lg h-12 max-w-xs w-3/12">
          {" "}
          <Skeleton className="rounded-lg h-12" />
        </div>
      </div>
      <div className="flex flex-row max-h-12 gap-2">
        <div className="h-48 rounded-lg h-12 max-w-xs w-6/12">
          {" "}
          <Skeleton className="rounded-lg h-12" />
        </div>
        <div className="h-48 rounded-lg h-12 max-w-xs w-4/12">
          {" "}
          <Skeleton className="rounded-lg h-12" />
        </div>
        <div className="h-48 rounded-lg h-12 max-w-xs w-2/12">
          {" "}
          <Skeleton className="rounded-lg h-12" />
        </div>
      </div>
    </>
  );
};

================
File: components/navbar/BurgerButton.tsx
================
import React from "react";
import { useSidebarContext } from "@/components/layout/layout-context";
import { StyledBurgerButton } from "./Navbar.styles";

export const BurguerButton = () => {
  const { collapsed, setCollapsed } = useSidebarContext();

  return (
    <div
      className={StyledBurgerButton()}
      // open={collapsed}
      onClick={setCollapsed}>
      <div />
      <div />
    </div>
  );
};

================
File: components/navbar/DarkModeSwitch.tsx
================
import React from "react";
import { useTheme as useNextTheme } from "next-themes";
import { Switch } from "@nextui-org/react";
import { SunIcon, MoonIcon } from "../icons/Icons";

export const DarkModeSwitch = () => {
  const { setTheme, resolvedTheme } = useNextTheme();
  return (
    <Switch
      isSelected={resolvedTheme === "dark" ? true : false}
      onValueChange={(e) => setTheme(e ? "dark" : "light")}
      thumbIcon={resolvedTheme === "dark" ? <MoonIcon /> : <SunIcon />}
      color="default"
    />
  );
};

================
File: components/navbar/Navbar.styles.ts
================
import { tv } from "@nextui-org/react";

// NEEDS TO BE REFACTORED

export const StyledBurgerButton = tv({
  base: "absolute flex flex-col justify-around w-6 h-6 bg-transparent border-none cursor-pointer padding-0 z-[202] focus:outline-none [&_div]:w-6 [&_div]:h-px [&_div]:bg-default-900 [&_div]:rounded-xl  [&_div]:transition-all  [&_div]:relative  [&_div]:origin-[1px] ",

  variants: {
    open: {
      true: "[&",
    },
  },
  //   "",
  //   "& div": {

  //     "&:first-child": {
  //       transform: "translateY(-4px) rotate(0deg)",
  //       height: "1px",
  //       marginTop: "10px",
  //     },
  //     "&:nth-child(2)": {
  //       transform: "translateY(4px) rotate(0deg)",
  //       height: "1px",
  //       marginBottom: "10px",
  //     },
  //   },
  //   variants: {
  //     open: {
  //       true: {
  //         "& div": {
  //           "&:first-child": {
  //             marginTop: "0px",
  //             transform: "translateY(1px) rotate(45deg)",
  //           },
  //           "&:nth-child(2)": {
  //             marginBottom: "0px",
  //             transform: "translateY(4px) rotate(-45deg)",
  //           },
  //         },
  //       },
  //     },
  //   },
});

================
File: components/navbar/Navbar.tsx
================
import {
  Input,
  Link,
  Navbar,
  NavbarContent,
  Button,
  Tooltip,
  Modal,
  ModalHeader,
  ModalBody,
  ModalFooter,
  ModalContent,
  useDisclosure,
} from "@nextui-org/react";
import React from "react";
import { TitleOnlyIcon, EdgeStyleIcon, FilterIcon } from "@/components/icons/Icons";
import { BurguerButton } from "./BurgerButton";
import { NotificationsDropdown } from "@/components/navbar/NotificationsDropdown";
import { UserDropdown } from "@/components/navbar/UserDropdown";
import { DarkModeSwitch } from "./DarkModeSwitch";
import { useTheme as useNextTheme } from "next-themes";
import { useAuthStore } from "@/helpers/auth-store";
import { FilterModal } from "./modals/FilterModal";
import { filterProps } from "framer-motion";
import { InfoAlert } from "@/components/alert/InfoAlert";

interface Props {
  children: React.ReactNode;
}

export const NavbarWrapper = ({ children }: Props) => {
  const { currentWindow, setShowDescription, showDescription } = useAuthStore();
  const { isOpen, onOpen, onOpenChange, onClose } = useDisclosure();

  const handleTitleOnly = () => {
    setShowDescription(!showDescription);
  };

  const handleModalOpen = () => {
    onOpen();
  };

  return (
    <>
      <InfoAlert />
      <div className="relative flex flex-col flex-1 overflow-y-auto overflow-x-hidden">
        <Navbar
          isBordered
          className="w-full"
          classNames={{
            wrapper: "w-full max-w-full",
          }}>
          <NavbarContent className="md:hidden">
            <BurguerButton />
          </NavbarContent>
          {currentWindow === "test-release" ? (
            <NavbarContent justify="start" className="w-full max-md:hidden">
              <Tooltip
                showArrow={true}
                content={showDescription ? "Hide descriptions" : "Show descriptions"}
                placement="bottom"
                color="warning">
                <div>
                  {showDescription ? (
                    <TitleOnlyIcon onClick={handleTitleOnly} className="cursor-pointer" />
                  ) : (
                    <EdgeStyleIcon onClick={handleTitleOnly} className="cursor-pointer" />
                  )}
                </div>
              </Tooltip>
              <FilterIcon className="cursor-pointer" onClick={handleModalOpen} />
              <FilterModal isOpen={isOpen} onOpen={onOpen} onOpenChange={onOpenChange} onClose={onClose} />
            </NavbarContent>
          ) : (
            <NavbarContent justify="start" className="w-full max-md:hidden"></NavbarContent>
          )}
          <NavbarContent justify="end" className="w-fit data-[justify=end]:flex-grow-0">
            <div className="flex items-center gap-2 max-md:hidden">
              <DarkModeSwitch />
            </div>

            <NotificationsDropdown />

            <NavbarContent>
              <UserDropdown />
            </NavbarContent>
          </NavbarContent>
        </Navbar>
        {children}
      </div>
    </>
  );
};

================
File: components/navbar/NotificationsDropdown.tsx
================
import { Dropdown, DropdownItem, DropdownMenu, DropdownSection, DropdownTrigger, NavbarItem } from "@nextui-org/react";
import React from "react";
import { NotificationIcon } from "../icons/Icons";
import { Badge } from "@nextui-org/react";

export const NotificationsDropdown = () => {
  return (
    <Dropdown placement="bottom-end">
      <DropdownTrigger>
        <NavbarItem>
          <Badge content="5" color="danger" placement="top-right">
            <NotificationIcon width={28} height={28} />
          </Badge>
        </NavbarItem>
      </DropdownTrigger>
      <DropdownMenu className="w-80" aria-label="Avatar Actions">
        <DropdownSection title="Notificacions">
          <DropdownItem
            classNames={{
              base: "py-2",
              title: "text-base font-semibold",
            }}
            key="1"
            description="Sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim.">
            ð£ Edit your information
          </DropdownItem>
          <DropdownItem
            key="2"
            classNames={{
              base: "py-2",
              title: "text-base font-semibold",
            }}
            description="Sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim.">
            ð Say goodbye to paper receipts!
          </DropdownItem>
          <DropdownItem
            key="3"
            classNames={{
              base: "py-2",
              title: "text-base font-semibold",
            }}
            description="Sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim.">
            ð£ Edit your information
          </DropdownItem>
        </DropdownSection>
      </DropdownMenu>
    </Dropdown>
  );
};

================
File: components/navbar/UserDropdown.tsx
================
import { Avatar, Dropdown, DropdownItem, DropdownMenu, DropdownTrigger, Navbar, NavbarItem } from "@nextui-org/react";
import React, { useCallback } from "react";
import { DarkModeSwitch } from "./DarkModeSwitch";
import { useRouter } from "next/navigation";

export const UserDropdown = () => {
  const router = useRouter();

  const handleLogout = useCallback(async () => {
    router.replace("/login");
  }, [router]);

  return (
    <Dropdown>
      <NavbarItem>
        <DropdownTrigger>
          <Avatar
            as="button"
            color="secondary"
            size="md"
            src="https://trello-members.s3.amazonaws.com/5e68bc325c270506507aa81b/975e4d7f5e966e61fa5b37f80d99a5a9/170.png"
          />
        </DropdownTrigger>
      </NavbarItem>
      <DropdownMenu aria-label="User menu actions" onAction={(actionKey) => console.log({ actionKey })}>
        <DropdownItem key="profile" className="flex flex-col justify-start w-full items-start">
          <p>Signed in as</p>
          <p>zoey@example.com</p>
        </DropdownItem>
        <DropdownItem key="settings">My Settings</DropdownItem>
        <DropdownItem key="team_settings">Team Settings</DropdownItem>
        <DropdownItem key="analytics">Analytics</DropdownItem>
        <DropdownItem key="system">System</DropdownItem>
        <DropdownItem key="configurations">Configurations</DropdownItem>
        <DropdownItem key="help_and_feedback">Help & Feedback</DropdownItem>
        <DropdownItem key="logout" color="danger" className="text-danger" onPress={handleLogout}>
          Log Out
        </DropdownItem>
        <DropdownItem key="switch">
          <DarkModeSwitch />
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
};

================
File: components/serviceRequest/modals/EditModal.tsx
================
import {
  Modal,
  ModalContent,
  ModalBody,
  ModalHeader,
  ModalFooter,
  Button,
  Input,
  Textarea,
  Select,
  SelectItem,
} from "@nextui-org/react";
import React from "react";
import { useState, useEffect } from "react";
import { useTranslations } from "next-intl";
import { toast } from "sonner";

interface SelectValue {
  key: string;
  value: string;
}

interface EditModalProps {
  isOpen: boolean;
  onOpen: () => void;
  onOpenChange: (open: boolean) => void;
  onClose: () => void;
  onSubmit: (title: string, tlink: string, elink: string, desc: string, type: string) => void;
  arrTypes: SelectValue[];
}

export const EditModal: React.FC<EditModalProps> = (props) => {
  const t = useTranslations("ServiceRequest");
  const g = useTranslations("Global");
  const [title, setTitle] = useState("");
  const [tlink, setTlink] = useState("");
  const [elink, setElink] = useState("");
  const [desc, setDesc] = useState("");
  const [type, setType] = useState("");
  let arrTypes = props.arrTypes;
  const handleSubmit = () => {
    if (!title || !desc || !type) {
      toast.error(t("messages.requiredFields"), {
        duration: 2000,
      });
      return;
    }
    props.onSubmit(title, tlink, elink, desc, type);
  };

  useEffect(() => {
    if (props.isOpen) {
      setTitle("");
      setTlink("");
      setElink("");
      setDesc("");
      setType("");
      arrTypes[0] = { key: "", value: "" };
    }
  }, [props.isOpen]);
  return (
    <Modal size="2xl" isOpen={props.isOpen} onOpenChange={props.onOpenChange} isDismissable={false}>
      <ModalContent>
        {(onClose) => (
          <>
            <ModalHeader>{t("labels.modal.header")}</ModalHeader>
            <ModalBody>
              <Input
                isRequired
                type="text"
                placeholder={t("labels.modal.titlePlaceholder")}
                labelPlacement="outside"
                label={t("labels.modal.title")}
                className="w-full"
                value={title}
                onValueChange={setTitle}
              />
              <Select
                isRequired
                label={t("labels.type")}
                labelPlacement="outside"
                placeholder={t("labels.modal.typePlaceholder")}
                items={arrTypes}
                className="max-w-xs w-6/12"
                size="md"
                radius="sm"
                selectionMode="single"
                selectedKeys={[type]}
                onChange={(event) => setType(event.target.value)}>
                {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
              </Select>
              <Input
                type="text"
                placeholder={t("labels.modal.externalLinkPlaceholder")}
                labelPlacement="outside"
                label={t("labels.modal.externalLink")}
                className="w-full"
                value={elink}
                onValueChange={setElink}
              />
              <Input
                type="text"
                placeholder={t("labels.modal.trelloLinkPlaceholder")}
                labelPlacement="outside"
                label={t("labels.modal.trelloLink")}
                className="w-full"
                value={tlink}
                onValueChange={setTlink}
              />
              <Textarea
                isRequired
                placeholder={t("labels.modal.descriptionPlaceholder")}
                label={t("labels.modal.description")}
                labelPlacement="outside"
                className="w-full"
                minRows={4}
                maxRows={10}
                value={desc}
                onValueChange={setDesc}
              />
            </ModalBody>
            <ModalFooter>
              <Button size="sm" color="danger" variant="flat" onPress={props.onClose}>
                {g("cancel")}
              </Button>
              <Button size="sm" color="primary" onClick={handleSubmit}>
                {g("save")}
              </Button>
            </ModalFooter>
          </>
        )}
      </ModalContent>
    </Modal>
  );
};

================
File: components/serviceRequest/table/RenderCell.tsx
================
import React from "react";
import { LinkIcon, TrelloIcon, TrashIcon, EditIcon } from "@/components/icons/Icons";

interface Props {
  id: string;
  data: string;
  columnKey: string | React.Key;
  onClick?: (id: string, option: string) => void;
}

export const RenderCell = ({ id, data, columnKey, onClick }: Props) => {
  if (!data) {
    return null; // Return null instead of an empty string
  }
  const handleClick = (id: string, option: string) => {
    if (onClick) {
      onClick(id, option);
    }
  };

  const externalLink = (url: string) => {
    window.open(url, "_blank");
  };

  const cellValue = data;
  switch (columnKey) {
    case "trelloLink":
      return cellValue != null ? (
        <TrelloIcon className="cursor-pointer mx-auto" onClick={() => externalLink(cellValue)} />
      ) : null;
    case "externalLink":
      return cellValue != null ? (
        <LinkIcon className="cursor-pointer mx-auto" onClick={() => externalLink(cellValue)} />
      ) : null;
    case "actions":
      return (
        <div className="flex flex-row mx-auto gap-2 text-center">
          <EditIcon className="cursor-pointer" onClick={() => handleClick(id, "edit")} />
          <LinkIcon className="cursor-pointer" onClick={() => handleClick(id, "associate")} />
          <TrashIcon className="cursor-pointer" onClick={() => handleClick(id, "delete")} />
        </div>
      );
    default:
      return <>{cellValue != "" ? cellValue : null}</>;
  }
};

================
File: components/serviceRequest/index.tsx
================
"use client";
import React, { useState, useEffect } from "react";
import { TableWrapper } from "@/components/table/Table";
import { ServiceRequest as IServiceRequest } from "@/helpers/interfaces";
import { SortDescriptor, Select, SelectItem, Button, useDisclosure } from "@nextui-org/react";
import { RenderCell } from "@/components/serviceRequest/table/RenderCell";
import { SrType, VttsSystem, ReleaseVersion, Stage, VttsUser, Status } from "@/helpers/interfaces";
import { PlusIcon } from "@/components/icons/Icons";
import { useTranslations } from "next-intl";
import { EditModal } from "./modals/EditModal";
import { toast } from "sonner";

interface SelectValue {
  key: string;
  value: string;
}

interface Descriptor {
  column: string;
  direction: string;
}

const columns = [
  {
    name: "table.header.actions",
    hideHeader: true,
  },
  {
    name: "table.header.id",
    sortable: false,
    hideHeader: true,
    hideColumn: true,
  },
  {
    name: "table.header.type",
    sortable: true,
  },
  {
    name: "table.header.srNumber",
    sortable: true,
  },
  {
    name: "table.header.status",
    sortable: true,
  },
  {
    name: "table.header.description",
    sortable: true,
    width: "w-2/4",
  },
  {
    name: "table.header.externalLink",
    sortable: false,
    width: "w-1/12",
  },
  {
    name: "table.header.trelloLink",
    sortable: false,
    width: "w-1/12",
  },
];

export const ServiceRequest = () => {
  const t = useTranslations("ServiceRequest");
  const [ready, setReady] = useState(false);
  const [rows, setRows] = useState([]);
  const [query, setQuery] = useState("/api/v1/serviceRequest");
  const [typeQuery, setTypeQuery] = useState("/api/v1/srType");
  const [srTypes, setSrTypes] = useState<SelectValue[]>([]);
  const [selectedSrType, setSelectedSrType] = useState("0");
  const [status, setStatus] = useState<SelectValue[]>([]);
  const [selectedStatus, setSelectedStatus] = useState("0");
  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({ column: "3", direction: "descending" });
  const [descriptor, setDescriptor] = useState<Descriptor>({ column: "srNumber", direction: "desc" });
  const { isOpen, onOpen, onOpenChange, onClose } = useDisclosure();

  const statusArray = [
    { key: "0", value: "All" },
    { key: "1", value: "Open" },
    { key: "2", value: "Closed" },
  ];

  const fetchServiceRequest = async () => {
    try {
      const response = await fetch(query, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      const newData = data.map((item: IServiceRequest) => {
        return {
          actions: "actions",
          id: item.id,
          type: item.srTypeRelation.srType,
          srNumber: item.srNumber,
          status: item.statusSr,
          description: item.description,
          externalLink: item.externalLink,
          trelloLink: item.trelloLink,
        };
      });
      setRows(newData);
    } catch (error) {
      console.error("Error fetching service request", error);
    }
  };

  const fetchType = async () => {
    try {
      const response = await fetch(typeQuery, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      data = data.map((item: SrType) => ({ key: item.id, value: item.srType }));
      let dataAux = [{ key: 0, value: "All" }, ...data];
      setSrTypes(dataAux);
    } catch (error) {
      console.error("Error fetching srType", error);
    }
  };

  const handleClick = (id: string, option: string) => {};

  const refreshQuery = () => {
    let newQuery = "/api/v1/serviceRequest?";
    if (selectedSrType !== "0") {
      newQuery += `srType=${selectedSrType}&`;
    }
    if (selectedStatus !== "0") {
      newQuery += `status=${Number(selectedStatus) === 1 ? "OPEN" : "CLOSED"}&`;
    }
    setQuery(newQuery + `orderBy=${descriptor.column}&orderDirection=${descriptor.direction}`);
    console.log(newQuery + `orderBy=${descriptor.column}&orderDirection=${descriptor.direction}`);
  };

  const handleSelectionChange = (select: string, value: string) => {
    if (value === "") return null;
    switch (select) {
      case "srType":
        setSelectedSrType(value);
        break;
      case "status":
        setSelectedStatus(value);
        break;
      default:
        break;
    }
  };

  const handleNew = () => {
    onOpen();
  };

  const handleSortChange = (sortDescriptor: SortDescriptor) => {
    const column =
      sortDescriptor.column === "2"
        ? "srType"
        : sortDescriptor.column === "3"
        ? "srNumber"
        : sortDescriptor.column === "4"
        ? "statusSr"
        : sortDescriptor.column === "5"
        ? "description"
        : sortDescriptor.column === "6"
        ? "externalLink"
        : "trelloLink";
    const direction = sortDescriptor.direction === "ascending" ? "asc" : "desc";
    setDescriptor({ column, direction });
  };

  const handleSubmit = (title: string, tlink: string, elink: string, desc: string, type: string) => {
    onClose();
    console.log(title, tlink, elink, desc, type);
    toast.success(t("messages.success"));
  };

  useEffect(() => {
    refreshQuery();
  }, [selectedSrType, selectedStatus, descriptor]);

  useEffect(() => {
    fetchServiceRequest();
    fetchType();
    setTimeout(() => {
      setReady(true);
    }, 200);
  }, [query]);

  return (
    ready && (
      <div className="w-10/12 mx-auto mt-4 flex flex-col">
        <div className="w-full flex flex-row">
          <Button
            className="bg-foreground h-12 text-background"
            onClick={handleNew}
            endContent={<PlusIcon />}
            size="md">
            {t("table.actions.newSR")}
          </Button>
          <div className="w-4"></div>
          <Select
            label={t("labels.type")}
            items={srTypes}
            className="max-w-xs w-1/12"
            size="sm"
            radius="sm"
            selectionMode="single"
            selectedKeys={[selectedSrType]}
            onChange={(event) => handleSelectionChange("srType", event.target.value)}>
            {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
          </Select>
          <div className="w-6"></div>
          <Select
            label={t("labels.status")}
            items={statusArray}
            className="max-w-xs w-1/12"
            size="sm"
            radius="sm"
            selectionMode="single"
            selectedKeys={[selectedStatus]}
            onChange={(event) => handleSelectionChange("status", event.target.value)}>
            {(item: SelectValue) => <SelectItem key={item.key}>{item.value}</SelectItem>}
          </Select>
        </div>
        <div className="w-full mt-4">
          <TableWrapper
            rows={rows}
            columns={columns}
            onClick={handleClick}
            onSortChange={handleSortChange}
            sortDescriptorProp={sortDescriptor}
            multiLanguage="ServiceRequest"
            RenderCell={RenderCell}
          />
        </div>
        <EditModal
          isOpen={isOpen}
          onOpen={onOpen}
          onOpenChange={onOpenChange}
          onClose={onClose}
          onSubmit={handleSubmit}
          arrTypes={srTypes}
        />
      </div>
    )
  );
};

================
File: components/sidebar/CompaniesDropdown.tsx
================
"use client";
import React, { useState } from "react";
import { AcmeIcon } from "../icons/acme-icon";

interface Company {
  name: string;
  desc: string;
  logo: React.ReactNode;
}

export const CompaniesDropdown = () => {
  const [company, setCompany] = useState<Company>({
    name: "VTTS",
    desc: "ITP Aero - PSS Systems",
    logo: <AcmeIcon />,
  });
  return (
    <div className="w-full min-w-[260px]">
      <div className="flex items-center gap-2">
        {company.logo}
        <div className="flex flex-col gap-4">
          <h3 className="text-xl font-medium m-0 text-default-900 -mb-4 whitespace-nowrap">{company.name}</h3>
          <span className="text-xs font-medium text-default-500">{company.desc}</span>
        </div>
      </div>
    </div>
  );
};

================
File: components/sidebar/Sidebar.styles.ts
================
import { tv } from "@nextui-org/react";

export const SidebarWrapper = tv({
  base: "bg-background transition-transform h-full fixed -translate-x-full w-64 shrink-0 z-[202] overflow-y-auto border-r border-divider flex-col py-6 px-3 md:ml-0 md:flex md:static md:h-screen md:translate-x-0 ",

  variants: {
    collapsed: {
      true: "translate-x-0 ml-0 pt-20 [display:inherit]",
    },
  },
  // ""
  //   "@md": {
  //     marginLeft: "0",
  //     display: "flex",
  //     position: "static",
  //     height: "100vh",
  //     transform: "translateX(0)",
  //   },
  //   variants: {
  //     collapsed: {
  //       true: {
  //         display: "inherit",
  //         marginLeft: "0 ",
  //         transform: "translateX(0)",
  //       },
  //     },
  //   },
});
export const Overlay = tv({
  base: "bg-[rgb(15_23_42/0.3)] fixed inset-0 z-[201] opacity-80 transition-opacity md:hidden md:z-auto md:opacity-100",
});

export const Header = tv({
  base: "flex gap-8 items-center px-6",
});

export const Body = tv({
  base: "flex flex-col gap-6 mt-9 px-2",
});

export const Footer = tv({
  base: "flex items-center justify-center gap-6 pt-16 pb-8 px-8 md:pt-10 md:pb-0",
});

export const Sidebar = Object.assign(SidebarWrapper, {
  Header,
  Body,
  Overlay,
  Footer,
});

================
File: components/sidebar/Sidebar.tsx
================
import React from "react";
import { Sidebar } from "./Sidebar.styles";
import { Avatar, Tooltip } from "@nextui-org/react";
import { CompaniesDropdown } from "./CompaniesDropdown";
import { SidebarItem } from "./SidebarItem";
import { SidebarMenu } from "./SidebarMenu";
import { useSidebarContext } from "../layout/layout-context";
import { usePathname } from "next/navigation";
import LocaleSwitcherSelect from "@/components/language/LocaleSwitcherSelect";
import { useLocale, useTranslations } from "next-intl";
import {
  TestIcon,
  DashboardIcon,
  TaskIcon,
  ReminderIcon,
  CommandLineIcon,
  DatabaseSyncIcon,
  BubbleChatEditIcon,
  GitBranchIcon,
  SettingsIcon,
} from "@/components/icons/Icons";

export const SidebarWrapper = () => {
  const pathname = usePathname();
  const { collapsed, setCollapsed } = useSidebarContext();
  const locale = useLocale();
  const t = useTranslations("Sidebar");

  return (
    <aside className="h-screen z-[20] sticky top-0">
      {collapsed ? <div className={Sidebar.Overlay()} onClick={setCollapsed} /> : null}
      <div
        className={Sidebar({
          collapsed: collapsed,
        })}>
        <div className={Sidebar.Header()}>
          <CompaniesDropdown />
        </div>
        <div className="flex flex-col justify-between h-full">
          <div className={Sidebar.Body()}>
            <SidebarItem
              title={t("links.home.label")}
              icon={<DashboardIcon />}
              isActive={pathname === "/" + locale}
              href="/"
            />
            <SidebarMenu title={t("links.projectManagement.label")}>
              <SidebarItem
                isActive={pathname === "/" + locale + t("links.serviceRequest.href")}
                title={t("links.serviceRequest.label")}
                icon={<BubbleChatEditIcon />}
                href={t("links.serviceRequest.href")}
              />
              <SidebarItem
                isActive={pathname === "/" + locale + t("links.version.href")}
                title={t("links.version.label")}
                href={t("links.version.href")}
                icon={<GitBranchIcon />}
              />
            </SidebarMenu>
            <SidebarMenu title={t("links.testing.label")}>
              <SidebarItem
                isActive={pathname === "/a"}
                title={t("links.manageRelease.label")}
                icon={<DatabaseSyncIcon />}
                href="manage-release"
              />
              <SidebarItem
                isActive={pathname === "/a"}
                title={t("links.createList.label")}
                icon={<ReminderIcon />}
                href="create-list"
              />
              <SidebarItem
                isActive={pathname === "/" + locale + t("links.testRelease.href")}
                title={t("links.testRelease.label")}
                icon={<TestIcon />}
                href={t("links.testRelease.href")}
              />
            </SidebarMenu>

            <SidebarMenu title={t("links.development.label")}>
              <SidebarItem
                isActive={pathname === "/a"}
                title={t("links.srDocument.label")}
                icon={<CommandLineIcon />}
              />
              <SidebarItem isActive={pathname === "/a"} title={t("links.myTasks.label")} icon={<TaskIcon />} />
            </SidebarMenu>
          </div>
          <div className={Sidebar.Footer()}>
            <Tooltip content={"Settings"} color="primary">
              <div className="max-w-fit">
                <SettingsIcon />
              </div>
            </Tooltip>
            <Tooltip content={"Profile"} color="primary">
              <Avatar
                src="https://trello-members.s3.amazonaws.com/5e68bc325c270506507aa81b/975e4d7f5e966e61fa5b37f80d99a5a9/170.png"
                size="sm"
              />
            </Tooltip>
            <LocaleSwitcherSelect defaultValue={locale} />
          </div>
        </div>
      </div>
    </aside>
  );
};

================
File: components/sidebar/SidebarItem.tsx
================
import NextLink from "next/link";
import React from "react";
import { useSidebarContext } from "../layout/layout-context";
import clsx from "clsx";
import { useSelectedLayoutSegment } from "next/navigation";
import { ComponentProps } from "react";
import { Link, Pathnames } from "@/routing";

interface Props {
  title: string;
  icon: React.ReactNode;
  isActive?: boolean;
  href?: string;
}

export const SidebarItem = ({ icon, title, isActive, href = "" }: Props) => {
  const { collapsed, setCollapsed } = useSidebarContext();
  const selectedLayoutSegment = useSelectedLayoutSegment();
  const pathname = selectedLayoutSegment ? `/${selectedLayoutSegment}` : "/";

  const handleClick = () => {
    if (window.innerWidth < 768) {
      setCollapsed();
    }
  };
  return (
    <NextLink href={href} className="text-default-900 active:bg-none max-w-full">
      <div
        className={clsx(
          isActive ? "bg-primary-100 [&_svg_path]:fill-primary-500" : "hover:bg-default-100",
          "flex gap-2 w-full min-h-[44px] h-full items-center px-3.5 rounded-xl cursor-pointer transition-all duration-150 active:scale-[0.98]"
        )}
        onClick={handleClick}>
        {icon}
        <span className="text-default-900">{title}</span>
      </div>
    </NextLink>
  );
};

================
File: components/sidebar/SidebarMenu.tsx
================
import React from "react";

interface Props {
  title: string;
  children?: React.ReactNode;
}

export const SidebarMenu = ({ title, children }: Props) => {
  return (
    <div className="flex gap-2 flex-col">
      <span className="text-xs font-normal ">{title}</span>
      {children}
    </div>
  );
};

================
File: components/table/Table.tsx
================
"use client";
import {
  Link,
  Table,
  TableBody,
  TableCell,
  TableColumn,
  TableHeader,
  TableRow,
  getKeyValue,
  SortDescriptor,
} from "@nextui-org/react";
import React, { useEffect } from "react";
import { useTranslations } from "next-intl";

interface RowsProps {
  id: string;
  system: string;
  version: string;
  date: string;
}

interface RenderCellProps {
  id: string;
  data: any;
  columnKey: string;
  onClick?: (id: string, option: string) => void;
}

interface Column {
  name: string;
  align?: "start" | "center" | "end";
  hideHeader?: boolean;
  hideColumn?: boolean;
  sortable?: boolean;
  width?: string;
}

interface TableWrapperProps {
  rows: RowsProps[];
  columns: Column[];
  isLoading?: boolean;
  onSortChange?: (sortDescriptor: SortDescriptor) => void;
  onClick?: (id: string, option: string) => void;
  sortDescriptorProp: SortDescriptor;
  multiLanguage: string;
  RenderCell: React.FC<RenderCellProps>;
}

export const TableWrapper: React.FC<TableWrapperProps> = ({
  rows,
  columns,
  isLoading,
  onSortChange,
  onClick,
  sortDescriptorProp,
  multiLanguage,
  RenderCell,
}) => {
  const t = useTranslations(multiLanguage);
  const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>(sortDescriptorProp);
  const [hideColumn, setHideColumn] = React.useState(true);

  useEffect(() => {
    if (onSortChange) {
      onSortChange(sortDescriptor);
    }
  }, [sortDescriptor]);

  return (
    <Table
      isStriped
      removeWrapper
      aria-label="Version"
      sortDescriptor={sortDescriptor}
      onSortChange={setSortDescriptor}>
      <TableHeader>
        {columns.map((column, index) => {
          const isActionsColumn = column.name === "table.header.actions";
          return (
            <TableColumn
              key={index}
              hideHeader={column.hideHeader}
              align={column.align ?? "center"}
              style={isActionsColumn ? { maxWidth: "100px" } : {}}
              className={`${column.hideColumn ? "hideColumn" : ""} ${
                isActionsColumn ? "narrowColumn" : "centeredHeader"
              } ${column.width ? column.width : ""}`}
              allowsSorting={column.sortable}>
              {t(column.name)}
            </TableColumn>
          );
        })}
      </TableHeader>
      <TableBody items={rows}>
        {rows.map((row, index) => (
          <TableRow key={index}>
            {Object.keys(row).map((key, index) => (
              <TableCell className={hideColumn && key == "id" ? "hideColumn" : ""} key={index}>
                <RenderCell id={row.id} data={getKeyValue(row, key)} columnKey={key} onClick={onClick} />
              </TableCell>
            ))}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

================
File: components/test-release/modals/Attached.tsx
================
import { DocIcon, XLSIcon, ImgIcon, PDFIcon, DownloadIcon } from "../../icons/Icons";
import { useEffect, useState } from "react";
import { Spacer } from "@nextui-org/react";

interface AttachedDocumentProps {
  file: string;
}

const handleDownload = async (file: string) => {
  const response = await fetch(`/documents/${file}`);
  if (response.status === 200) {
    const blob = await response.blob();
    const link = document.createElement("a");
    link.href = window.URL.createObjectURL(blob);
    link.setAttribute("download", file);
    document.body.appendChild(link);
    link.click();
    link.remove();
  } else {
    console.error("Error downloading file");
  }
};

export const AttachedDocument: React.FC<AttachedDocumentProps> = ({ file }) => {
  const [document, setDocument] = useState<JSX.Element | null>(null);
  useEffect(() => {
    if (file.includes(".doc")) {
      setDocument(<DocIcon width={36} height={36} />);
    } else if (file.includes(".xls")) {
      setDocument(<XLSIcon width={36} height={36} />);
    } else if (file.includes(".pdf")) {
      setDocument(<PDFIcon width={36} height={36} />);
    } else {
      setDocument(<ImgIcon width={36} height={36} />);
    }
  }, [file]);

  if (!document) {
    return null;
  }

  return (
    <div className="flex">
      {document}
      <Spacer />
      <div className="flex items-center">
        <p className="text-sm">{file}</p>

        <Spacer x={8} />
        {
          <DownloadIcon
            className="cursor-pointer"
            onClick={() => {
              handleDownload(file);
            }}
          />
        }
      </div>
    </div>
  );
};

================
File: components/test-release/modals/Comments.tsx
================
import React from "react";
interface CommentsProps {
  comment?: string;
}

export const Comments: React.FC<CommentsProps> = (props) => {
  return (
    <div
      className="bg-gray-100 border border-gray-300 rounded-lg p-4 text-gray-800"
      dangerouslySetInnerHTML={{ __html: props.comment || "" }}
    />
  );
};

================
File: components/test-release/modals/EditModal.tsx
================
import React from "react";
import { parseAbsoluteToLocal, toCalendarDate } from "@internationalized/date";
import { I18nProvider } from "@react-aria/i18n";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  Divider,
  Input,
  Select,
  SelectItem,
  DatePicker,
  Spacer,
} from "@nextui-org/react";
import { EditModalProps, ModalEditContentProps } from "@/helpers/interfaces";
import { useEffect, useState } from "react";
import EditModalSkeleton from "./EditModalSkeleton";
import { Status } from "@/helpers/interfaces";
import { Calendar03Icon, TrelloIcon, ExternalLinkIcon } from "@/components/icons/Icons";
import { getLocalTimeZone, today } from "@internationalized/date";
import { Editor } from "@tinymce/tinymce-react";
import DragNdrop from "@/components/dragndrop/DragAndDrop";
import { toast } from "sonner";

interface SelectValue {
  key: string;
  value: string;
}

export const EditModal: React.FC<EditModalProps> = (props) => {
  const [ready, setReady] = useState(false);

  const [content, setContent] = useState<ModalEditContentProps>();
  let defaultDate = today(getLocalTimeZone());

  const [actualDate, setActualDate] = React.useState(defaultDate);
  const releaseNotes = [
    { key: "yes", value: "YES" },
    { key: "no", value: "NO" },
  ];
  const [systemStatuses, setSystemStatuses] = useState<SelectValue[]>([]);
  const [selectedSystemStatus, setSelectedSystemStatus] = useState("14");
  const [selectedReleaseNote, setSelectedReleaseNote] = useState("no");

  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [selectedFileName, setSelectedFileName] = useState<string | undefined>(undefined);
  const [selectedFileId, setSelectedFileId] = useState<string | null>(null);

  const [comments, setComments] = useState<string>("");

  useEffect(() => {
    if (props.isOpen && props.id) {
      setContent(undefined);
      fetchInfo();
      fetchSystemStatuses();
      setSelectedFile(null);
    }
  }, [props.isOpen]);

  const fetchSystemStatuses = async () => {
    try {
      const response = await fetch("/api/v1/systemStatus", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      let data = await response.json();
      setSystemStatuses(data.map((item: Status) => ({ key: item.id.toString(), value: item.descStatus })));
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const fetchInfo = async () => {
    try {
      const response = await fetch(`/api/v1/testPssSystem/${props.id}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      await response.json().then((data) => {
        setContent(data);
        //setSelectedSystemStatus(data.status);
        setSelectedSystemStatus(data.status?.toString() ?? null);
        setSelectedReleaseNote(data.releaseNote);
        setSelectedFileId(data.testAttachedInfo[0]?.id ?? null);
        setSelectedFileName(data.testAttachedInfo[0]?.fileName ?? undefined);
        if (data.dateTest) {
          setActualDate(toCalendarDate(parseAbsoluteToLocal(data.dateTest)));
        }
        setTimeout(() => {
          setReady(true);
        }, 250);
      });
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const handleSelectionChange = (select: string, value: string) => {
    switch (select) {
      case "releaseNote":
        setSelectedReleaseNote(value);
        break;
      case "systemStatus":
        setSelectedSystemStatus(value);
        break;
      default:
        break;
    }
  };

  const handleFileChange = async (file: File) => {
    console.log(file);
    setSelectedFile(file);
  };
  const handleExternalLink = (link: string) => {
    window.open(link, "_blank");
  };

  const handleSave = async () => {
    try {
      const formData = new FormData();
      formData.append("file", selectedFile?.name ?? "");
      formData.append("comments", comments);
      formData.append("status", selectedSystemStatus);
      formData.append("releaseNote", selectedReleaseNote);
      formData.append("dateTest", actualDate.toString());
      formData.append("fileId", selectedFileId ?? "");
      formData.append("srNumber", content?.srNumberRelation.srNumber ?? "");
      console.log(selectedFile);

      const response = await fetch(`/api/v1/testPssSystem/${props.id}`, {
        method: "PUT",
        body: formData,
      });

      if (response.ok) {
        props.handleRefresh && props.handleRefresh();
        props.onOpenChange && props.onOpenChange(false);
        toast.success("Data saved successfully", { duration: 3000, position: "top-right" });
      } else {
        console.error("Failed to save");
      }
    } catch (error) {
      console.error("Error saving data:", error);
    }
  };
  return (
    <Modal
      size="5xl"
      isOpen={props.isOpen}
      onOpenChange={props?.onOpenChange}
      isDismissable={false}
      isKeyboardDismissDisabled={true}
      className="z-40">
      <ModalContent>
        {content ? (
          (onClose) => (
            <>
              <div className={ready ? "block" : "hidden"}>
                <ModalHeader className="flex flex-col gap-1">
                  <div>
                    <div className="flex flex-row w-full justify-between">
                      <div className="flex flex-row gap-2">{content?.srNumberRelation.srNumber}</div>
                      <div className="flex flex-row gap-4 align-middle">
                        <TrelloIcon
                          width={30}
                          height={30}
                          onClick={() => handleExternalLink(content.srNumberRelation.trelloLink ?? "")}
                          className={
                            content.srNumberRelation.trelloLink != null ? "opacity-100 cursor-pointer" : "opacity-20"
                          }
                        />
                        <ExternalLinkIcon
                          width={30}
                          height={30}
                          onClick={() => handleExternalLink(content.srNumberRelation.externalLink)}
                          className={
                            content.srNumberRelation.externalLink != null ? "opacity-100 cursor-pointer" : "opacity-20"
                          }
                        />
                        <Spacer x={10} />
                      </div>
                    </div>
                    <div className="text-small text-default-500">{content?.srNumberRelation.description}</div>
                  </div>

                  <Divider />
                </ModalHeader>
                <ModalBody>
                  <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
                    <div className="flex flex-nowrap">
                      <Input
                        isReadOnly
                        isDisabled
                        type="text"
                        label="App"
                        value={content?.releaseVersionRelation.appRelation.app}
                        className="max-w-28"
                      />
                    </div>
                    <div className="flex flex-nowrap">
                      <Input
                        isReadOnly
                        isDisabled
                        type="text"
                        label="Version"
                        value={content?.releaseVersionRelation.systemVersion.version}
                        className="max-w-28"
                      />
                    </div>
                    <div className="flex flex-nowrap">
                      <Input
                        isReadOnly
                        isDisabled
                        type="text"
                        label="Stage"
                        value={content?.releaseVersionRelation.stageRelation.stage}
                        className="max-w-28"
                      />
                    </div>
                    <div className="flex flex-nowrap">
                      <Input
                        isDisabled={true}
                        type="text"
                        label="Assigned"
                        value={
                          content != null && content.assignedRelation != null ? content.assignedRelation.assigned : " "
                        }
                        className="max-w-28"
                      />
                    </div>
                  </div>
                  <Divider className="my-4" />
                  <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
                    <Select
                      label="Test Status"
                      className="max-w-xs w-3/12 h-12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      defaultSelectedKeys={[selectedSystemStatus]}
                      onChange={(event) => handleSelectionChange("systemStatus", event.target.value)}>
                      {systemStatuses.map((item, index) => (
                        <SelectItem key={item.key}>{item.value}</SelectItem>
                      ))}
                    </Select>
                    <Select
                      label="Release Note"
                      className="max-w-28 w-2/12 h-12"
                      size="sm"
                      radius="sm"
                      selectionMode="single"
                      selectedKeys={[selectedReleaseNote]}
                      onChange={(event) => handleSelectionChange("releaseNote", event.target.value)}>
                      {releaseNotes.map((item, index) => (
                        <SelectItem key={item.key}>{item.value}</SelectItem>
                      ))}
                    </Select>
                    <I18nProvider locale="en-GB">
                      <DatePicker
                        size="sm"
                        radius="sm"
                        className="w-3/12 h-12"
                        label={"Test Date"}
                        variant={"flat"}
                        value={actualDate}
                        onChange={setActualDate}
                        showMonthAndYearPickers
                        selectorIcon={<Calendar03Icon />}
                      />
                    </I18nProvider>
                  </div>
                  <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
                    <div className="flex flex-col w-full">
                      {/* content != null && content.testAttachedInfo */}
                      <DragNdrop
                        onFilesSelected={handleFileChange}
                        srNumber={content.srNumberRelation.srNumber}
                        fileName={selectedFileName}
                        width={"100%"}
                        height={112}
                      />
                    </div>
                  </div>
                  <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
                    <div className="flex flex-col w-full">
                      {/* {content != null ? <Comments comment={content.COMMENTS} /> : ""} */}
                      {content != null ? (
                        <Editor
                          apiKey="r7158rr7s6ebkb65xmfx31fja06m36w2c9jnxgdpdi82uhoo"
                          onEditorChange={(newValue, editor) => {
                            setComments(newValue);
                          }}
                          scriptLoading={{ async: true }}
                          init={{
                            height: 300,
                            menubar: false,
                            plugins: [
                              // Core editing features
                              "wordcount",
                              "lists",
                              "code",
                              "fullscreen",
                            ],
                            toolbar:
                              " forecolor | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat | code fullscreen",
                            mergetags_list: [
                              { value: "First.Name", title: "First Name" },
                              { value: "Email", title: "Email" },
                            ],
                          }}
                          initialValue={content.comments || ""}
                        />
                      ) : (
                        ""
                      )}
                    </div>
                  </div>
                </ModalBody>
                <ModalFooter>
                  <Button size="sm" color="danger" variant="light" onPress={onClose}>
                    Close
                  </Button>
                  <Button size="sm" color="primary" variant="light" onClick={handleSave}>
                    Save
                  </Button>
                </ModalFooter>
              </div>
              <div className={ready ? "hidden" : "block"}>
                <EditModalSkeleton />
              </div>
            </>
          )
        ) : (
          <EditModalSkeleton />
        )}
      </ModalContent>
    </Modal>
  );
};

================
File: components/test-release/modals/EditModalSkeleton.tsx
================
import { Skeleton, Divider, ModalHeader, ModalBody, ModalFooter } from "@nextui-org/react";

export default function EditModalSkeleton() {
  return (
    <>
      <ModalHeader className="flex flex-col gap-1">
        <div>
          <Skeleton className="w-1/12 h-8 rounded-lg" />
          <Skeleton className="w-5/12 h-4 mt-1 rounded-lg" />
        </div>
        <Divider />
      </ModalHeader>

      <ModalBody>
        <div className="flex w-full flex-row gap-4 ">
          <Skeleton className="w-28 h-14  rounded-lg" />
          <Skeleton className="w-28 h-14  rounded-lg" />
          <Skeleton className="w-28 h-14  rounded-lg" />
          <Skeleton className="w-28 h-14  rounded-lg" />
        </div>
        <Divider className="my-4" />
        <div className="flex w-full flex-row gap-4 ">
          <Skeleton className="w-60 h-12  rounded-lg" />
          <Skeleton className="w-28 h-12  rounded-lg" />
          <Skeleton className="w-60 h-12  rounded-lg" />
        </div>
        <div className="flex w-full flex-row gap-4 ">
          <Skeleton className="w-full h-28  rounded-lg" />
        </div>
        <div className="flex w-full flex-row gap-4 ">
          <Skeleton className="w-full h-72  rounded-lg" />
        </div>
      </ModalBody>

      <ModalFooter>
        <Skeleton className="w-20 h-8 rounded-lg" />
        <Skeleton className="w-20 h-8 rounded-lg" />
      </ModalFooter>
    </>
  );
}

================
File: components/test-release/modals/ViewModal.tsx
================
import React from "react";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  Divider,
  Input,
  ScrollShadow,
  Tooltip,
  Card,
  CardBody,
  CardHeader,
  Spacer,
} from "@nextui-org/react";
import { ViewModalProps, ModalViewContentProps } from "@/helpers/interfaces";
import { useEffect, useState } from "react";
import { formatDate } from "@/helpers/js-utils";
import { AttachedDocument } from "./Attached";
import ViewModalSkeleton from "@/components/test-release/modals/ViewModalSkeleton";
import { Calendar03Icon, TrelloIcon, ExternalLinkIcon } from "@/components/icons/Icons";

export const ViewModal: React.FC<ViewModalProps> = (props) => {
  const [content, setContent] = useState<ModalViewContentProps>();

  useEffect(() => {
    if (props.isOpen && props.id) fetchInfo();
  }, [props.isOpen]);

  const fetchInfo = async () => {
    try {
      const response = await fetch(`/api/v1/testPssSystem/${props.id}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      await response.json().then((data) => {
        console.log(data);
        setContent(data);
      });
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const handleExternalLink = (link: string) => {
    window.open(link, "_blank");
  };
  return (
    <Modal
      size="5xl"
      isOpen={props.isOpen}
      onOpenChange={props?.onOpenChange}
      isDismissable={false}
      isKeyboardDismissDisabled={true}
      className="z-40">
      <ModalContent>
        {content ? (
          (onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                <div>
                  <div className="flex flex-row w-full justify-between">
                    <div className="flex flex-row gap-2">{content?.srNumberRelation.srNumber}</div>
                    <div className="flex flex-row gap-4 align-middle">
                      <TrelloIcon
                        width={30}
                        height={30}
                        onClick={() => handleExternalLink(content.srNumberRelation.trelloLink ?? "")}
                        className={
                          content.srNumberRelation.trelloLink != null ? "opacity-100 cursor-pointer" : "opacity-20"
                        }
                      />
                      <ExternalLinkIcon
                        width={30}
                        height={30}
                        onClick={() => handleExternalLink(content.srNumberRelation.externalLink)}
                        className={
                          content.srNumberRelation.externalLink != null ? "opacity-100 cursor-pointer" : "opacity-20"
                        }
                      />
                      <Spacer x={10} />
                    </div>
                  </div>
                  <div className="text-small text-default-500">{content?.srNumberRelation.description}</div>
                </div>

                <Divider />
              </ModalHeader>
              <ModalBody>
                <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
                  <div className="flex flex-nowrap">
                    <Input
                      isReadOnly
                      type="text"
                      label="App"
                      value={content?.releaseVersionRelation.appRelation.app}
                      className="max-w-28"
                    />
                  </div>
                  <div className="flex flex-nowrap">
                    <Input
                      isReadOnly
                      type="text"
                      label="Version"
                      value={content?.releaseVersionRelation.systemVersion.version}
                      className="max-w-28"
                    />
                  </div>
                  <div className="flex flex-nowrap">
                    <Input
                      isReadOnly
                      type="text"
                      label="Stage"
                      value={content?.releaseVersionRelation.stageRelation.stage}
                      className="max-w-28"
                    />
                  </div>
                  <div className="flex flex-nowrap">
                    <Input
                      isReadOnly
                      type="text"
                      label="Release Note"
                      value={content?.releaseNote.toLocaleUpperCase()}
                      className="max-w-28"
                    />
                  </div>
                  <div className="flex flex-nowrap">
                    <Input
                      isReadOnly
                      type="text"
                      label="Test Date"
                      value={content != null ? formatDate(content.dateTest) : ""}
                      className="max-w-32"
                    />
                  </div>
                  <div className="flex flex-nowrap">
                    <Input
                      isReadOnly
                      type="text"
                      label="Assigned"
                      value={
                        content != null && content.assignedRelation != null ? content.assignedRelation.assigned : " "
                      }
                      className="max-w-28"
                    />
                  </div>
                  <div className="flex flex-nowrap">
                    <Input
                      isReadOnly
                      type="text"
                      label="Test Status"
                      color={
                        content != null && content.statusRelation
                          ? content.statusRelation.isFailed != "N"
                            ? "danger"
                            : "success"
                          : "default"
                      }
                      value={
                        content != null && content.statusRelation ? content.statusRelation.descStatus : "No Status"
                      }
                      className="max-w-48"
                    />
                  </div>
                </div>
                <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
                  <div className="flex flex-col max-w-92">
                    {content != null && content.testAttachedInfo ? (
                      <>
                        <p className="w-full mb-2 text-default-500 text-sm">Attached</p>
                        <Card shadow="sm">
                          <CardBody>
                            <AttachedDocument file={content.testAttachedInfo[0].fileName} />
                          </CardBody>
                        </Card>
                      </>
                    ) : (
                      ""
                    )}
                  </div>
                </div>

                <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
                  <div className="flex flex-col w-full">
                    {/* {content != null ? <Comments comment={content.COMMENTS} /> : ""} */}
                    {content != null ? (
                      <Card shadow="sm" allowTextSelectionOnPress={true}>
                        <CardHeader>
                          {" "}
                          <p className="text-small text-default-500">Comments</p>
                        </CardHeader>
                        <CardBody>
                          <ScrollShadow className="w-full h-fit max-h-92">
                            <div dangerouslySetInnerHTML={{ __html: content.comments || "" }}></div>
                          </ScrollShadow>
                        </CardBody>
                      </Card>
                    ) : (
                      ""
                    )}
                  </div>
                </div>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
              </ModalFooter>
            </>
          )
        ) : (
          <ViewModalSkeleton />
        )}
      </ModalContent>
    </Modal>
  );
};

================
File: components/test-release/modals/ViewModalSkeleton.tsx
================
import { Skeleton, Divider, ModalHeader, ModalBody, ModalFooter } from "@nextui-org/react";

export default function ViewModalSkeleton() {
  return (
    <>
      <ModalHeader className="flex flex-col gap-1">
        <div>
          <Skeleton className="w-36 h-5" />
          <div className="text-small text-default-500">
            <Skeleton className="w-72 h-4" />
          </div>
        </div>
        <Divider />
      </ModalHeader>

      <ModalBody>
        <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
          <div className="flex flex-nowrap">
            <Skeleton className="w-28 h-5" />
          </div>
          <div className="flex flex-nowrap">
            <Skeleton className="w-28 h-5" />
          </div>
          <div className="flex flex-nowrap">
            <Skeleton className="w-28 h-5" />
          </div>
          <div className="flex flex-nowrap">
            <Skeleton className="w-28 h-5" />
          </div>
          <div className="flex flex-nowrap">
            <Skeleton className="w-32 h-5" />
          </div>
          <div className="flex flex-nowrap">
            <Skeleton className="w-28 h-5" />
          </div>
          <div className="flex flex-nowrap">
            <Skeleton className="w-48 h-5" />
          </div>
        </div>

        <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
          <div className="flex flex-col max-w-92">
            <Skeleton className="w-full h-24 rounded-lg" />
          </div>
        </div>

        <div className="flex w-full flex-wrap md:flex-nowrap items-end mb-6 md:mb-0 gap-4">
          <div className="flex flex-col w-full">
            <h5 className="w-full mb-2 text-default-500">Comments</h5>
            <Skeleton className="w-full h-36" />
          </div>
        </div>
      </ModalBody>

      <ModalFooter>
        <Skeleton className="w-20 h-8" />
      </ModalFooter>
    </>
  );
}

================
File: components/test-release/index.tsx
================
"use client";

import { TestCard } from "@/components/test-release/TestCard";
import { useEffect, useState } from "react";
import { ListSrSkeleton } from "@/components/test-release/ListSRSkeleton";
import { ViewModal } from "@/components/test-release/modals/ViewModal";
import { useDisclosure } from "@nextui-org/react";
import { useAuthStore } from "@/helpers/auth-store";
import { useDataStore } from "@/helpers/data-store";
import { EditModal } from "./modals/EditModal";

export const TestRelease = () => {
  const { isOpen, onOpenChange, onOpen, onClose } = useDisclosure();
  const {
    isOpen: isOpenEdit,
    onOpenChange: onOpenChangeEdit,
    onOpen: onOpenEdit,
    onClose: onCloseEdit,
  } = useDisclosure();
  const [id, setId] = useState(0);
  const [refresh, setRefresh] = useState(false);
  const { setCurrentWindow } = useAuthStore();
  const { testPssSystem, setTestPssSystem } = useDataStore();
  const [isLoaded, setLoaded] = useState(false);

  useEffect(() => {
    fetchServiceRequests();
    setCurrentWindow("test-release");
  }, []);

  useEffect(() => {
    if (refresh) {
      fetchServiceRequests();
      setRefresh(false);
    }
  }, [refresh, testPssSystem]);

  const handleRefresh = () => {
    setRefresh(true);
  };

  const fetchServiceRequests = async () => {
    try {
      const response = await fetch("/api/v1/testPssSystem", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      console.log(data);
      setTestPssSystem(data);
      setLoaded(true);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };
  const onView = async (id: number) => {
    onOpen();
    setId(id);
  };

  const onEdit = async (id: number) => {
    onOpenEdit();
    setId(id);
  };

  return (
    <div>
      {isLoaded ? (
        testPssSystem.length > 0 ? (
          testPssSystem.map((testInfo, index) => (
            <TestCard key={index} {...testInfo} onEdit={onEdit} onView={onView} handleRefresh={handleRefresh} />
          ))
        ) : (
          <div className="flex justify-center items-center h-[80vh]">No service requests found</div>
        )
      ) : (
        <ListSrSkeleton />
      )}
      {isOpen && (
        <ViewModal
          isOpen={isOpen}
          onClose={onClose}
          onOpen={onOpen}
          onOpenChange={onOpenChange}
          onView={onView}
          id={id}
        />
      )}
      {isOpenEdit && (
        <EditModal
          isOpen={isOpenEdit}
          onClose={onCloseEdit}
          onOpen={onOpenEdit}
          onOpenChange={onOpenChangeEdit}
          onEdit={onEdit}
          handleRefresh={handleRefresh}
          id={id}
        />
      )}
    </div>
  );
};

================
File: components/test-release/ListSRSkeleton.tsx
================
import { ServiceRequestSkeleton } from "@/components/test-release/ServiceRequestSkeleton";

export const ListSrSkeleton = () => {
  const numRows = 15;
  return (
    <>
      {Array.from({ length: numRows }).map((_, index) => (
        <ServiceRequestSkeleton key={index} />
      ))}
    </>
  );
};

================
File: components/test-release/ServiceRequestSkeleton.tsx
================
import { Skeleton, Card, CardHeader, Divider, CardBody, Spacer } from "@nextui-org/react";
import { useAuthStore } from "@/helpers/auth-store";

export const ServiceRequestSkeleton = () => {
  const { showDescription } = useAuthStore();
  return (
    <div>
      <Card className="mx-4 my-2">
        <CardHeader className="flex gap-3">
          <div className="flex flex-col min-w-[37%]">
            <div className="flex text-md">
              <Skeleton className="h-5 w-1/4 mb-2 rounded-lg" />
              <Spacer x={2} />
              <Skeleton className="h-5 w-6 rounded-full" />
              <Spacer x={2} />
              <Skeleton className="h-5 w-6 rounded-full" />
              <Spacer x={2} />
              <Skeleton className="h-5 w-6 rounded-full" />
              <Spacer x={2} />
              <Skeleton className="h-5 w-6 rounded-full" />
            </div>
            <Skeleton className="h-4 w-3/4 mt-2 rounded-lg" />
          </div>
          <div className="flex justify-end w-full">
            <div className="flex items-center space-x-2">
              <Skeleton className="h-6 w-6 rounded-full" />
              <Skeleton className="h-5 w-16 rounded-lg" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-6 w-6 rounded-full" />
              <Skeleton className="h-5 w-12 rounded-lg" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2 ">
              <Skeleton className="h-6 w-6 rounded-full" />
              <Skeleton className="h-5 w-16 rounded-lg" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-6 w-6 rounded-full" />
              <Skeleton className="h-5 w-16 rounded-lg" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-6 w-24 rounded-lg" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-5 w-36 rounded-lg" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-8 w-8 rounded-full" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-6 w-6 rounded-full" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-6 w-6 rounded-full" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Skeleton className="h-6 w-6 rounded-full" />
            </div>
          </div>
        </CardHeader>
        {showDescription ? (
          <>
            <Divider />
            <CardBody>
              <Skeleton className="h-4 w-full mb-2 rounded-lg" />
              <Skeleton className="h-4 w-4/5 rounded-lg" />
            </CardBody>
          </>
        ) : null}
      </Card>
    </div>
  );
};

================
File: components/test-release/TestCard.tsx
================
import {
  Card,
  CardHeader,
  CardBody,
  CardFooter,
  Divider,
  Chip,
  Avatar,
  Badge,
  Tooltip,
  Spacer,
} from "@nextui-org/react";
import { TestPssSystemProps, VttsUser, RelatedSR } from "@/helpers/interfaces";
import { formatDate } from "@/helpers/js-utils";
import { useAuthStore } from "@/helpers/auth-store";
import { useDataStore } from "@/helpers/data-store";
import { useState } from "react";
import {
  Calendar03Icon,
  SourceCodeSquareIcon,
  CloudServerIcon,
  Note05Icon,
  Clip,
  TrelloIcon,
  EditIcon,
  ViewIcon,
  UnlinkIcon,
  BookmarkIcon,
  PinCode,
  ExternalLinkIcon,
} from "../icons/Icons";
export const TestCard: React.FC<TestPssSystemProps> = ({ onView, onEdit, handleRefresh, ...props }) => {
  const {
    id,
    dateTest,
    comments,
    dateModification,
    releaseNote,
    appRelation,
    srTypeRelation,
    srNumberRelation,
    stageRelation,
    statusRelation,
    assignedRelation,
    testAttachedInfo,
    releaseVersionRelation,
    systemVersionRelation,
  } = props;
  const username: VttsUser = JSON.parse(localStorage.getItem("user")?.toString() || "{}");
  const { showDescription } = useAuthStore();
  const { testPssSystem, setTestPssSystem } = useDataStore();
  const [relatedSRs, setRelatedSRs] = useState<RelatedSR[]>([]);

  const handleView = () => {
    onView(props.id);
  };

  const handleEdit = () => {
    onEdit(props.id);
  };

  const handleCheckRelated = async () => {
    const result = await fetch(`/api/v1/related?srNumber1=${id}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });
    await result.json().then((data) => {
      const newRelatedSRs = data.map((item: RelatedSR) => ({
        id: item.id,
        srNumber1Relation: item.srNumber1Relation,
        srNumber2Relation: item.srNumber2Relation,
        linkedByRelation: item.linkedByRelation,
      }));
      if (newRelatedSRs.length > 0) {
        setRelatedSRs(newRelatedSRs);
      } else {
        handleBookmark();
      }
    });
  };

  const handleUnlink = async () => {
    try {
      const response = await fetch(`/api/v1/testPssSystem/${id}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ id: null }),
      });

      await response.json().then((data) => {
        handleRefresh();
      });
    } catch (error) {
      console.error("Error to unlink tester:", error);
    }
  };

  const handleFilterSRNumber = async (srNumber: string) => {
    try {
      const response = await fetch("/api/v1/testPssSystem?serviceRequest=" + srNumber, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      console.log(data);
      setTestPssSystem(data);
    } catch (error) {
      console.error("Error fetching service requests:", error);
    }
  };

  const handleBookmark = async () => {
    const user = window.localStorage.getItem("user");

    try {
      const response = await fetch(`/api/v1/testPssSystem/${id}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: user,
      });

      await response.json().then((data) => {
        handleRefresh();
      });
    } catch (error) {
      console.error("Error to bookmark service request:", error);
    }
  };

  /*
    try {
      const response = await fetch(`/api/v1/testPssSystem/${id}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: user,
      });

      await response.json().then((data) => {
        handleRefresh();
      });
    } catch (error) {
      console.error("Error to bookmark service request:", error);
    }*/

  return (
    <div>
      <Card
        className={srNumberRelation.lastTesterRelation.id === username.id ? "mx-4 my-2 bg-orange-100" : "mx-4 my-2"}>
        <CardHeader className="flex gap-3">
          <div className="flex flex-col min-w-[37%]">
            <div className="flex text-md">
              <div
                className="cursor-pointer hover:underline"
                onClick={() => {
                  handleFilterSRNumber(srNumberRelation.srNumber);
                }}>
                {srNumberRelation.srNumber}
              </div>
              {!showDescription ? (
                <>
                  <Spacer x={2} />
                  <div className="text-small text-default-500">{srNumberRelation.description}</div>
                </>
              ) : null}
              <Spacer className="flex" x={4} />

              <ViewIcon onClick={handleView} className="cursor-pointer mt-0.5" width={18} height={18} />
              {assignedRelation === null ? (
                <>
                  <Spacer x={2} />
                  <BookmarkIcon onClick={handleBookmark} className="cursor-pointer mt-0.5" width={18} height={18} />
                </>
              ) : null}
              {assignedRelation?.id === username.id ? (
                <>
                  <Spacer x={2} />
                  <EditIcon onClick={handleEdit} className="cursor-pointer mt-0.5" width={18} height={18} />
                  <Spacer x={2} />
                  <UnlinkIcon onClick={handleUnlink} className="cursor-pointer mt-0.5" width={18} height={18} />
                </>
              ) : null}
            </div>

            {showDescription ? <div className="text-small text-default-500">{srNumberRelation.description}</div> : null}
          </div>
          <div className="flex justify-end w-full">
            <div className="flex items-center space-x-2">
              <SourceCodeSquareIcon />
              <Tooltip content="Version" color="primary">
                <p>{releaseVersionRelation.systemVersion.version}</p>
              </Tooltip>
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <PinCode />
              <Tooltip content="Stage" color="primary">
                <p className="min-w-7">{releaseVersionRelation.stageRelation.stage}</p>
              </Tooltip>
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2 ">
              <CloudServerIcon />
              <p className="min-w-16">{releaseVersionRelation.appRelation.app}</p>
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Note05Icon />
              <Tooltip content="Release Note" color="primary">
                <p>{releaseNote.toLocaleUpperCase()}</p>
              </Tooltip>
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Calendar03Icon />
              <p className="min-w-24">{dateTest != null ? formatDate(dateTest) : " "}</p>
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2 ">
              {statusRelation != null ? (
                <Chip
                  variant="flat"
                  className="min-w-36 text-center"
                  color={statusRelation.isFailed != "N" ? "danger" : "success"}>
                  {statusRelation.descStatus}{" "}
                </Chip>
              ) : (
                <Chip variant="flat" color={"default"} className="min-w-36 text-center">
                  No Status{" "}
                </Chip>
              )}
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Avatar name={assignedRelation?.assigned} size="sm" />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2">
              <Badge
                color="default"
                variant="faded"
                content={testAttachedInfo[0] != null && testAttachedInfo[0].fileName != "" ? "1" : "0"}>
                <Clip />
              </Badge>
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2 cursor-pointer">
              <TrelloIcon className={srNumberRelation.trelloLink != null ? "opacity-100" : "opacity-20"} />
            </div>
            <Spacer x={4} />
            <div className="flex items-center space-x-2 cursor-pointer">
              <ExternalLinkIcon className={srNumberRelation.externalLink != null ? "opacity-100" : "opacity-20"} />
            </div>
          </div>
        </CardHeader>
        {showDescription ? (
          <>
            <Divider />
            <CardBody>
              <p className="text-small text-default-500">{comments}</p>
            </CardBody>
          </>
        ) : null}
      </Card>
    </div>
  );
};

================
File: components/version/table/RenderCell.tsx
================
import React from "react";
import { formatDate } from "@/helpers/js-utils";
import { ViewIcon, TrashIcon, EditIcon, ChartIcon, ReminderIcon } from "@/components/icons/Icons";

interface Props {
  id: string;
  data: string;
  columnKey: string | React.Key;
  onClick?: (id: string, option: string) => void;
}

export const RenderCell = ({ id, data, columnKey, onClick }: Props) => {
  const handleClick = (id: string, option: string) => {
    if (onClick) {
      onClick(id, option);
    }
  };

  const cellValue = data;
  switch (columnKey) {
    case "date":
      return <>{formatDate(cellValue)}</>;
    case "system":
    case "version":
      return <>{cellValue}</>;
    case "actions":
      return (
        <div className="flex flex-row mx-auto gap-2">
          <ViewIcon className="cursor-pointer" onClick={() => handleClick(id, "view")} />
          <TrashIcon className="cursor-pointer" onClick={() => handleClick(id, "delete")} />
          <EditIcon className="cursor-pointer" onClick={() => handleClick(id, "edit")} />
          <ChartIcon className="cursor-pointer" onClick={() => handleClick(id, "chart")} />
          <ReminderIcon className="cursor-pointer" onClick={() => handleClick(id, "list")} />
        </div>
      );
    default:
      return <>{cellValue}</>;
  }
};

================
File: components/version/index.tsx
================
"use client";
import { useEffect, useState } from "react";
import { SystemVersion } from "@/helpers/interfaces";
import { TableWrapper } from "@/components/table/Table";
import { Spinner } from "@nextui-org/react";
import { useTranslations } from "next-intl";
import { SortDescriptor } from "@nextui-org/react";
import { RenderCell } from "./table/RenderCell";

interface Version {
  id: string;
  system: string;
  version: string;
  date: string;
  actions: "actions";
}

interface sortDescriptor {
  column: string;
  direction: string;
}

const columns = [
  {
    name: "table.header.actions",
    hideHeader: true,
  },
  {
    name: "table.header.id",
    hideHeader: true,
    hideColumn: true,
  },
  {
    name: "table.header.system",
    hideHeader: false,
    sortable: true,
  },
  {
    name: "table.header.version",
    hideHeader: false,
    sortable: true,
  },
  {
    name: "table.header.date",
    hideHeader: false,
    sortable: true,
  },
];

export const Version = () => {
  const [rows, setRows] = useState<Version[]>([]);
  const [query, setQuery] = useState("/api/v1/systemVersion?orderBy=version&orderDirection=desc");
  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({ column: "3", direction: "descending" });
  const fetchVersion = async () => {
    try {
      const response = await fetch(query, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      const newData = data.map((item: SystemVersion) => {
        return {
          actions: "actions",
          id: item.id,
          system: item.appRelation.app,
          version: item.version,
          date: item.deliveryDate,
        };
      });
      setRows(newData);
    } catch (error) {
      console.error("Error fetching version:", error);
    }
  };

  const handleSortChange = (sortDescriptor: SortDescriptor) => {
    const column = sortDescriptor.column === "2" ? "app" : sortDescriptor.column === "3" ? "version" : "deliveryDate";
    const direction = sortDescriptor.direction === "ascending" ? "asc" : "desc";
    setQuery(`/api/v1/systemVersion?orderBy=${column}&orderDirection=${direction}`);
  };

  const handleClick = (id: string, option: string) => {
    console.log("id", id, "option", option);
  };

  useEffect(() => {
    fetchVersion();
  }, [query]);

  return (
    <div className="w-10/12 mx-auto mt-4 flex flex-col">
      <TableWrapper
        rows={rows}
        columns={columns}
        onSortChange={handleSortChange}
        onClick={handleClick}
        sortDescriptorProp={sortDescriptor}
        multiLanguage="Version"
        RenderCell={RenderCell}
      />
    </div>
  );
};

================
File: config/fonts.ts
================
import { Fira_Code as FontMono, Inter as FontSans } from "next/font/google"

export const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
})

export const fontMono = FontMono({
  subsets: ["latin"],
  variable: "--font-mono",
})

================
File: helpers/alert-context.tsx
================
import React, { createContext, useState, ReactNode } from "react";

// Definir los tipos para la alerta y el contexto
type AlertType = "info" | "success" | "warning" | "error";

interface Alert {
  message: string;
  type: AlertType;
}

interface AlertContextType {
  alert: Alert | null;
  showAlert: (message: string, type?: AlertType) => void;
  hideAlert: () => void;
}

// Crear el contexto con un valor predeterminado
const AlertContext = createContext<AlertContextType | undefined>(undefined);

// Definir los props para el Provider
interface AlertProviderProps {
  children: ReactNode;
}

// Crear el Provider
export const AlertProvider: React.FC<AlertProviderProps> = ({ children }) => {
  const [alert, setAlert] = useState<Alert | null>(null);

  // FunciÃ³n para mostrar una alerta
  const showAlert = (message: string, type: AlertType = "info") => {
    setAlert({ message, type });
  };

  // FunciÃ³n para ocultar la alerta
  const hideAlert = () => {
    setAlert(null);
  };

  return <AlertContext.Provider value={{ alert, showAlert, hideAlert }}>{children}</AlertContext.Provider>;
};

// Custom hook para usar el contexto
export const useAlert = (): AlertContextType => {
  const context = React.useContext(AlertContext);
  if (!context) {
    throw new Error("useAlert must be used within an AlertProvider");
  }
  return context;
};

export default AlertContext;

================
File: helpers/allowed-routes.ts
================
export const allowedRoutes = ["/", "/test-release", "/version", "/serviceRequest"];

================
File: helpers/auth-store.ts
================
import { create } from "zustand";

interface AuthState {
  token: string | null;
  assigned: string | null;
  currentWindow: string | null;
  showDescription: boolean;
  setToken: (token: string) => void;
  clearToken: () => void;
  setAssigned: (assigned: string) => void;
  setCurrentWindow: (currentWindow: string) => void;
  setShowDescription: (showDescription: boolean) => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  token: null,
  setToken: (token: string) => set({ token }),
  clearToken: () => set({ token: null }),
  assigned: null,
  setAssigned: (assigned: string) => set({ assigned }),
  currentWindow: "home",
  setCurrentWindow: (currentWindow: string) => set({ currentWindow }),
  showDescription: true,
  setShowDescription: (showDescription: boolean) => set({ showDescription }),
}));

================
File: helpers/data-store.ts
================
import { create } from "zustand";
import { TestPssSystemProps } from "@/helpers/interfaces";

interface dataState {
  srNumber: string | null;
  setSrNumber: (srNumber: string) => void;
  clearSrNumber: () => void;
  testPssSystem: TestPssSystemProps[];
  setTestPssSystem: (testPssSystem: TestPssSystemProps[]) => void;
}

export const useDataStore = create<dataState>((set) => ({
  srNumber: null,
  setSrNumber: (srNumber: string) => set({ srNumber }),
  clearSrNumber: () => set({ srNumber: null }),
  testPssSystem: [],
  setTestPssSystem: (testPssSystem: TestPssSystemProps[]) => set({ testPssSystem }),
}));

================
File: helpers/interfaces.ts
================
export interface TestPssSystemProps {
  /* Properties */
  id: number;
  srType: number;
  srNumber: number;
  assigned: number;
  status: number;
  dateTest: string;
  comments: string;
  dateModification: string;
  releaseNote: string;
  windchillComment: string;
  app: number;
  releaseVersion: number;
  stage: number;
  /* Relations */
  appRelation: VttsSystem;
  srTypeRelation: SrType;
  srNumberRelation: ServiceRequest;
  stageRelation: Stage;
  statusRelation: Status;
  assignedRelation: VttsUser;
  testAttachedInfo: AttachedInfo[];
  releaseVersionRelation: ReleaseVersion;
  systemVersionRelation: SystemVersion;
  /* Functions */
  onView: (id: number) => void;
  onEdit: (id: number) => void;
  onOpen: () => void;
  handleRefresh: () => void;
}

export interface VttsSystem {
  id: number;
  app: string;
  description: string;
  explorerVersion: string;
  jreVersion: string;
}

export interface VttsUser {
  id: number;
  assigned: string;
  userName: string;
  password: string;
  email: string;
  mailSign: string;
  dateModification?: string;
  userModification?: string;
  userMessage?: string;
  profile?: string;
  srFilter1?: string;
  srFilter2?: string;
}

export interface SrType {
  id: number;
  srType: string;
  description: string;
}

export interface Stage {
  id: number;
  stage: string;
}

export interface ServiceRequest {
  id: number;
  srNumber: string;
  srTypeRelation: SrType;
  description: string;
  externalLink: string;
  trelloLink?: string;
  dataTestPath: string;
  lastTesterRelation: VttsUser;
  statusSr: string;
}

export interface TestPssSystem {
  id: number;
  dataTestPath: string;
  description: string;
  externalLink: string;
  appRelation: VttsSystem;
  lastTesterRelation: VttsUser;
  srTypeRelation: SrType;
  stageRelation: Stage;
  statusRelation: Status;
  assignedRelation: VttsUser;
  testAttachedInfo: AttachedInfo;
}

export interface SystemVersion {
  id: number;
  appRelation: VttsSystem;
  deliveryDate: string;
  version: string;
}

export interface RelatedSR {
  id: number;
  srNumber1Relation: ServiceRequest;
  srNumber2Relation: ServiceRequest;
  linkedByRelation: VttsUser;
}

export interface ReleaseVersion {
  id: number;
  appRelation: VttsSystem;
  deliveryDate: string;
  version: string;
  stageRelation: Stage;
  systemVersion: SystemVersion;
}
export interface Status {
  id: number;
  idStatus: string;
  descStatus: string;
  isFailed: string;
  displayOrder: number;
}

export interface AttachedInfo {
  idTestPssSystem: TestPssSystem;
  fileName: string;
  id: number;
}

export interface ViewModalProps {
  isOpen: boolean;
  onOpen?: () => void;
  onClose?: () => void;
  onOpenChange?: (isOpen: boolean) => void;
  onView?: (id: number) => void;
  id: number;
}

export interface EditModalProps {
  isOpen: boolean;
  onOpen?: () => void;
  onClose?: () => void;
  onOpenChange?: (isOpen: boolean) => void;
  onEdit?: (id: number) => void;
  handleRefresh?: () => void;
  id: number;
}

export interface ViewModal {
  title: string;
  sr_number: string;
  sr_type: string;
  description: string;
  comments: string;
  assigned: string;
  status: string;
  attached: AttachedFile;
  trellolink: string;
  externalLink: string;
  dateTest: string;
}

export interface AttachedFile {
  id: number;
  filename: string;
  path: string;
}

export interface ModalViewContentProps {
  /* Properties */
  id: number;
  srType: number;
  srNumber: number;
  assigned: number;
  status: number;
  dateTest: string;
  comments: string;
  dateModification: string;
  releaseNote: string;
  windchillComment: string;
  app: number;
  releaseVersion: number;
  stage: number;
  /* Relations */
  appRelation: VttsSystem;
  srTypeRelation: SrType;
  srNumberRelation: ServiceRequest;
  stageRelation: Stage;
  statusRelation: Status;
  assignedRelation: VttsUser;
  testAttachedInfo: AttachedInfo[];
  releaseVersionRelation: ReleaseVersion;
  systemVersionRelation: SystemVersion;
}

export interface ModalEditContentProps {
  /* Properties */
  id: number;
  srType: number;
  srNumber: number;
  assigned: number;
  status: number;
  dateTest: string;
  comments: string;
  dateModification: string;
  releaseNote: string;
  windchillComment: string;
  app: number;
  releaseVersion: number;
  stage: number;
  /* Relations */
  appRelation: VttsSystem;
  srTypeRelation: SrType;
  srNumberRelation: ServiceRequest;
  stageRelation: Stage;
  statusRelation: Status;
  assignedRelation: VttsUser;
  testAttachedInfo: AttachedInfo[];
  releaseVersionRelation: ReleaseVersion;
  systemVersionRelation: SystemVersion;
}

export interface InfoAlertProps {
  message?: string;
  onOpen?: () => void;
  onClose?: () => void;
  onOpenChange?: (isOpen: boolean) => void;
  isOpen?: boolean;
}

================
File: helpers/js-utils.ts
================
export function formatDate(isoDate: string): string {
  const date = new Date(isoDate);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0"); // Los meses empiezan desde 0
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}

================
File: helpers/jwt-verificator.ts
================
import { jwtVerify } from "jose";

export async function verifyJWT(token: string, secret: string) {
  try {
    const { payload } = await jwtVerify(token, new TextEncoder().encode(secret));
    return payload;
  } catch (err) {
    console.error("JWT verification failed:", err);
    throw new Error("Invalid token");
  }
}

================
File: helpers/schemas.ts
================
import { object, ref, string } from "yup";

export const LoginSchema = object().shape({
  user_name: string().required("Email is required"),
  password: string().required("Password is required"),
});

================
File: helpers/types.ts
================
// FORMS

export type LoginFormType = {
  user_name: string;
  password: string;
};

export type RegisterFormType = {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
};

================
File: i18n/request.ts
================
import { notFound } from "next/navigation";
import { getRequestConfig } from "next-intl/server";
import { routing } from "../routing";

export default getRequestConfig(async ({ locale }) => {
  // Validate that the incoming `locale` parameter is valid
  if (!routing.locales.includes(locale as any)) notFound();

  return {
    messages: (await import(`../messages/${locale}.json`)).default,
  };
});

================
File: messages/en.json
================
{
  "Languages": {
    "en": "English",
    "es": "Spanish"
  },
  "Global": {
    "cancel": "Cancel",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "add": "Add",
    "close": "Close",
    "search": "Search",
    "filter": "Filter",
    "clear": "Clear",
    "yes": "Yes",
    "no": "No",
    "loading": "Loading...",
    "actions": "Actions",
    "status": "Status",
    "system": "System",
    "prevision": "Prevision SR",
    "version": "Version",
    "date": "Delivery Date"
  },
  "HomePage": {
    "title": "Welcome to the Internationalization Example",
    "Description": "This is a simple example of how to internationalize a React application using react-intl."
  },
  "LocaleSwitcher": {
    "label": "Change language",
    "locale": "{locale, select, es {ð©ðª Spanish} en {ðºð¸ English} other {Unknown}}"
  },
  "ServiceRequest": {
    "table": {
      "header": {
        "id": "ID",
        "type": "Type",
        "srNumber": "SR Number",
        "actions": "Actions",
        "description": "Description",
        "externalLink": "External Link",
        "trelloLink": "Trello Link",
        "status": "Status",
        "dataTestPath": "data-test-path"
      },
      "actions": {
        "edit": "Edit",
        "associate": "Associate",
        "delete": "Delete",
        "newSR": "New SR"
      }
    },
    "labels": {
      "srNumber": "SR Number",
      "type": "Type",
      "description": "Description",
      "externalLink": "External Link",
      "trelloLink": "Trello Link",
      "status": "Status",
      "system": "System",
      "prevision": "Prevision SR",
      "id": "ID",
      "modal": {
        "header": "New Service Request",
        "title": "Title",
        "titlePlaceholder": "Enter a SR title",
        "description": "Description",
        "descriptionPlaceholder": "Enter a SR description",
        "trelloLink": "Trello Link",
        "trelloLinkPlaceholder": "https://trello.com/c/CF1Sw4VA/example-card",
        "externalLink": "External Link",
        "externalLinkPlaceholder": "https://example.com",
        "type": "Type",
        "typePlaceholder": "Select a SR type"
      }
    },
    "messages": {
      "requiredFields": "Please fill in all required fields",
      "success": "Service Request created successfully"
    }
  },
  "Version": {
    "table": {
      "header": {
        "version": "Version",
        "date": "Delivery Date",
        "status": "Status",
        "actions": "Actions",
        "system": "System",
        "prevision": "Prevision SR",
        "id": "ID"
      },
      "actions": {
        "edit": "Edit",
        "delete": "Delete"
      }
    }
  },
  "Sidebar": {
    "links": {
      "home": {
        "href": "/",
        "label": "Home"
      },
      "projectManagement": {
        "label": "Project Management"
      },
      "serviceRequest": {
        "label": "Service Request",
        "href": "/serviceRequest"
      },
      "version": {
        "label": "Version",
        "href": "/version"
      },
      "testing": {
        "label": "Testing"
      },
      "manageRelease": {
        "label": "Manage Release",
        "href": "/manage-release"
      },
      "createList": {
        "label": "Create List",
        "href": "/create-list"
      },
      "testRelease": {
        "href": "/testRelease",
        "label": "Test Release"
      },
      "development": {
        "label": "Development"
      },
      "srDocument": {
        "label": "Document SR",
        "href": "/sr-document"
      },
      "myTasks": {
        "label": "My Assignments",
        "href": "/my-tasks"
      }
    }
  }
}

================
File: messages/es.json
================
{
  "Languages": {
    "en": "InglÃ©s",
    "es": "EspaÃ±ol"
  },
  "Global": {
    "cancel": "Cancelar",
    "save": "Guardar",
    "delete": "Eliminar",
    "edit": "Editar",
    "add": "AÃ±adir",
    "close": "Cerrar",
    "search": "Buscar",
    "filter": "Filtrar",
    "clear": "Limpiar",
    "yes": "SÃ­",
    "no": "No",
    "loading": "Cargando...",
    "actions": "Acciones",
    "status": "Estado",
    "system": "Sistema",
    "prevision": "PrevisiÃ³n SR",
    "version": "VersiÃ³n",
    "date": "Fecha de Entrega"
  },
  "HomePage": {
    "title": "Bienvenido al Ejemplo de InternacionalizaciÃ³n",
    "Description": "Este es un ejemplo simple de cÃ³mo internacionalizar una aplicaciÃ³n React usando react-intl."
  },
  "LocaleSwitcher": {
    "label": "Cambiar Idioma",
    "locale": "{locale, select, es {ð©ðª EspaÃ±ol} en {ðºð¸ InglÃ©s} other {Desconocido}}"
  },
  "ServiceRequest": {
    "table": {
      "header": {
        "id": "ID",
        "type": "Tipo",
        "srNumber": "NÃºmero de SR",
        "actions": "Acciones",
        "description": "DescripciÃ³n",
        "externalLink": "Enlace Externo",
        "trelloLink": "Enlace Trello",
        "status": "Estado",
        "dataTestPath": "data-test-path"
      },
      "actions": {
        "edit": "Editar",
        "associate": "Asociar",
        "delete": "Borrar",
        "newSR": "Nueva SR"
      }
    },
    "labels": {
      "srNumber": "NÃºmero de SR",
      "type": "Tipo",
      "description": "DescripciÃ³n",
      "externalLink": "Enlace Externo",
      "trelloLink": "Enlace Trello",
      "status": "Estado",
      "system": "Sistema",
      "prevision": "PrevisiÃ³n SR",
      "id": "ID",
      "modal": {
        "header": "Nueva Service Request",
        "title": "TÃ­tulo",
        "titlePlaceholder": "Introduce un tÃ­tulo",
        "description": "DescripciÃ³n",
        "descriptionPlaceholder": "Introduce una descripciÃ³n",
        "trelloLink": "Enlace Trello",
        "trelloLinkPlaceholder": "https://trello.com/c/CF1Sw4VA/example-card",
        "externalLink": "Enlace Externo",
        "externalLinkPlaceholder": "https://example.com",
        "type": "Tipo",
        "typePlaceholder": "Selecciona un Tipo"
      }
    },
    "messages": {
      "requiredFields": "Por favor, rellene todos los campos obligatorios.",
      "success": "Service Request creada con Ã©xito"
    }
  },
  "Version": {
    "table": {
      "header": {
        "version": "VersiÃ³n",
        "date": "Fecha de Entrega",
        "status": "Estado",
        "actions": "Acciones",
        "system": "Sistema",
        "prevision": "PrevisiÃ³n SR",
        "id": "ID"
      },
      "actions": {
        "edit": "Editar",
        "delete": "Eliminar"
      }
    }
  },
  "Sidebar": {
    "links": {
      "home": {
        "href": "/",
        "label": "Inicio"
      },
      "projectManagement": {
        "label": "GestiÃ³n de Proyectos"
      },
      "serviceRequest": {
        "label": "Service Request",
        "href": "/serviceRequest"
      },
      "version": {
        "label": "VersiÃ³n",
        "href": "/version"
      },
      "testing": {
        "label": "Pruebas"
      },
      "manageRelease": {
        "label": "Gestionar Release",
        "href": "/manage-release"
      },
      "createList": {
        "label": "Crear Lista",
        "href": "/create-list"
      },
      "testRelease": {
        "href": "/testRelease",
        "label": "Testear Release"
      },
      "development": {
        "label": "Desarrollo"
      },
      "srDocument": {
        "label": "Documentar SR",
        "href": "/sr-document"
      },
      "myTasks": {
        "label": "Mis Asignaciones",
        "href": "/my-tasks"
      }
    }
  }
}

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres" // "mysql"
  url      = env("POSTGRES_HOST") // env("DATABASE_URL")
}

model ForecastStatus {
  id                      Int                   @id @default(autoincrement())
  status                  String                @unique
  description             String?
  forecastStatusRulesFrom ForecastStatusRules[] @relation("StatusFrom")
  forecastStatusRulesTo   ForecastStatusRules[] @relation("StatusTo")
  versionForecast         VersionForecast[]
}

model ForecastStatusRules {
  id         Int @id @default(autoincrement())
  statusFrom Int
  statusTo   Int

  statusFromRelation ForecastStatus @relation("StatusFrom", fields: [statusFrom], references: [id])
  statusToRelation   ForecastStatus @relation("StatusTo", fields: [statusTo], references: [id])

  @@unique([statusFrom, statusTo])
}

model RelatedSr {
  id        Int @id @default(autoincrement())
  srNumber1 Int
  srNumber2 Int
  linkedBy  Int

  srNumber1Relation ServiceRequest @relation("SrNumber1", fields: [srNumber1], references: [id])
  srNumber2Relation ServiceRequest @relation("SrNumber2", fields: [srNumber2], references: [id])
  linkedByRelation  VttsUser       @relation(fields: [linkedBy], references: [id])

  @@unique([srNumber1, srNumber2])
}

model StageVersion {
  id             Int              @id @default(autoincrement())
  stage          String           @unique
  ReleaseVersion ReleaseVersion[]
}

model ReleaseVersion {
  id             Int       @id @default(autoincrement())
  app            Int
  releaseVersion Int
  testDeadline   DateTime?
  stage          Int

  appRelation   VttsSystem      @relation(fields: [app], references: [id])
  systemVersion SystemVersion   @relation(fields: [releaseVersion], references: [id])
  testPssSystem TestPssSystem[]
  stageRelation StageVersion    @relation(fields: [stage], references: [id])

  @@unique([app, releaseVersion, stage])
}

model Resolution {
  id             Int       @id @default(autoincrement())
  srNumber       Int
  assigned       Int
  resolutionDate DateTime?
  comments       String?

  srNumberRelation ServiceRequest @relation(fields: [srNumber], references: [id])
  assignedRelation VttsUser       @relation(fields: [assigned], references: [id])
}

model ServiceRequest {
  id           Int     @id @default(autoincrement())
  srType       Int
  srNumber     String  @unique
  description  String?
  externalLink String?
  dataTestPath String?
  trelloLink   String?
  lastTester   Int
  statusSr     String

  srTypeRelation     SrType   @relation(fields: [srType], references: [id])
  lastTesterRelation VttsUser @relation(fields: [lastTester], references: [id])

  testPssSystem   TestPssSystem[]
  versionForecast VersionForecast[]
  relatedSr1      RelatedSr[]       @relation("SrNumber1")
  relatedSr2      RelatedSr[]       @relation("SrNumber2")
  resolution      Resolution[]
}

model SrType {
  id          Int     @id @default(autoincrement())
  srType      String  @unique
  description String?

  serviceRequest ServiceRequest[]
}

model SystemVersion {
  id           Int       @id @default(autoincrement())
  app          Int
  version      String
  deliveryDate DateTime?

  appRelation    VttsSystem       @relation(fields: [app], references: [id])
  releaseVersion ReleaseVersion[]

  // RelaciÃ³n inversa hacia VersionForecast (sin fields ni references)
  versionForecast VersionForecast[]
}

model TestAttachedInfo {
  id              Int    @id @default(autoincrement())
  idTestPssSystem Int
  fileName        String

  testPssSystemRelation TestPssSystem @relation(fields: [idTestPssSystem], references: [id])

  @@unique([idTestPssSystem, fileName])
}

model TestPssSystem {
  id               Int       @id @default(autoincrement())
  srNumber         Int
  assigned         Int?
  status           Int?
  dateTest         DateTime?
  comments         String?   @db.VarChar(1024)
  dateModification DateTime?
  releaseNote      String?
  windchillComment String?
  releaseVersion   Int

  srNumberRelation       ServiceRequest     @relation(fields: [srNumber], references: [id])
  assignedRelation       VttsUser?          @relation(fields: [assigned], references: [id])
  statusRelation         TestStatus?        @relation(fields: [status], references: [id])
  testAttachedInfo       TestAttachedInfo[]
  releaseVersionRelation ReleaseVersion     @relation(fields: [releaseVersion], references: [id])

  @@unique([releaseVersion, srNumber])
}

model TestStatus {
  id           Int     @id @default(autoincrement())
  idStatus     String  @unique
  descStatus   String?
  isFailed     String?
  displayOrder Int     @unique

  testPssSystem TestPssSystem[]
}

model VersionForecast {
  id               Int       @id @default(autoincrement())
  app              Int
  version          Int
  srNumber         Int
  dateModification DateTime?
  assigned         Int
  status           Int

  appRelation      VttsSystem     @relation(fields: [app], references: [id])
  versionRelation  SystemVersion  @relation(fields: [version], references: [id]) // RelaciÃ³n con SystemVersion
  srNumberRelation ServiceRequest @relation(fields: [srNumber], references: [id])
  assignedRelation VttsUser       @relation(fields: [assigned], references: [id])
  statusRelation   ForecastStatus @relation(fields: [status], references: [id])

  @@unique([app, version, srNumber])
}

model VttsSystem {
  id              Int     @id @default(autoincrement())
  app             String  @unique
  description     String?
  explorerVersion String?
  jreVersion      String?

  releaseVersion  ReleaseVersion[]
  systemVersion   SystemVersion[]
  versionForecast VersionForecast[]
}

model VttsUser {
  id               Int       @id @default(autoincrement())
  assigned         String    @unique
  userName         String
  password         String
  email            String
  mailSign         String
  dateModification DateTime?
  userModification String?
  userMessage      String?
  profile          String?
  srFilter1        String?   @db.VarChar(500)
  srFilter2        String?   @db.VarChar(500)

  serviceRequest  ServiceRequest[]
  versionForecast VersionForecast[]
  testPssSystem   TestPssSystem[]
  resolution      Resolution[]
  relatedSr       RelatedSr[]
}

================
File: public/vercel.svg
================
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
  padding: 0;
  margin: 0;
}

* {
  box-sizing: border-box;
}

.text-color-green {
  color: green;
}

.wysiwyg-color-red {
  color: red;
}
.wysiwyg-color-blue {
  color: blue;
}

.tox-statusbar__branding {
  display: none;
}

.hideColumn {
  display: none;
}
.narrowColumn {
  width: 33px;
  max-width: 33px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.centeredHeader {
  padding-left: 2.2rem !important;
}

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# sql
/sql
/prisma/migrations

# production
/build
/public/documents

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
/.github/

================
File: global.d.ts
================
// global.d.ts

declare global {
  namespace NodeJS {
    interface Global {
      mongoose: any;
    }
  }
}

// global.d.ts

declare namespace NodeJS {
  interface Global {
    mongoose: any; // Cambia `any` por un tipo mÃ¡s especÃ­fico si lo sabes.
  }
}

// Esto convierte el archivo en un mÃ³dulo y evita conflictos con otros archivos
export {};

================
File: jest.config.js
================
// jest.config.js
module.exports = {
  testEnvironment: "jest-environment-jsdom",
  setupFilesAfterEnv: ["<rootDir>/setupTests.ts"],
  moduleNameMapper: {
    "^@/(.*)$": "<rootDir>/$1",
  },
  transform: {
    "^.+\\.(ts|tsx)$": [
      "ts-jest",
      {
        tsconfig: "tsconfig.json", // Especifica tu tsconfig aquÃ­
        // Puedes agregar mÃ¡s opciones especÃ­ficas de ts-jest si lo necesitas
      },
    ],
  },
  moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json", "node"],
};

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Ignacio Tamayo

================
File: middleware.ts
================
import createMiddleware from "next-intl/middleware";
import { routing } from "./routing";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { verifyJWT } from "@/helpers/jwt-verificator";
import { allowedRoutes } from "@/helpers/allowed-routes";

const JWT_SECRET_KEY = process.env.JWT_SECRET || "ultrasecret";

// Crea el middleware de next-intl
const intlMiddleware = createMiddleware(routing);

export async function middleware(request: NextRequest) {
  // Ejecuta el middleware de internacionalizaciÃ³n primero
  const intlResponse = intlMiddleware(request);

  // Ejecuta la lÃ³gica de JWT y rutas permitidas despuÃ©s del middleware de internacionalizaciÃ³n
  const { pathname } = request.nextUrl;
  const token = request.cookies.get("userAuth")?.value;
  let user = null;

  try {
    if (token) {
      user = await verifyJWT(token, JWT_SECRET_KEY);
    }
  } catch (err) {
    console.error("JWT verification error:", err);
  }

  // Si el usuario ya estÃ¡ logueado, redirigir desde las rutas de login o registro
  if ((pathname === "/login" || pathname === "/register") && user) {
    return NextResponse.redirect(new URL("/", request.url));
  }

  // VerificaciÃ³n de token en rutas de la API
  if (pathname.startsWith("/api/v1")) {
    if (!token) {
      return NextResponse.json({ success: false, error: "No token provided" }, { status: 401 });
    }

    try {
      const decoded = await verifyJWT(token, JWT_SECRET_KEY);
    } catch (err) {
      console.error("JWT verification error:", err);
      return NextResponse.json({ success: false, error: "Invalid token" }, { status: 401 });
    }
  }

  // Verifica si la ruta es permitida y si el usuario no estÃ¡ autenticado
  if (allowedRoutes.includes(pathname) && !user) {
    return NextResponse.redirect(new URL("/en/login", request.url));
  }

  // Si next-intl manejÃ³ la respuesta, devuÃ©lvela, si no, continÃºa con la solicitud
  return intlResponse || NextResponse.next();
}

export const config = {
  // Match the same routes as in next-intl
  matcher: [
    // Enable a redirect to a matching locale at the root
    "/",

    // Set a cookie to remember the previous locale for
    // all requests that have a locale prefix
    "/(es|en)/:path*",

    // Enable redirects that add missing locales
    // (e.g. `/pathnames` -> `/en/pathnames`)
    "/((?!api|_next|_vercel|.*\\..*).*)",
  ],
};

================
File: next.config.js
================
const createNextIntlPlugin = require("next-intl/plugin");

const withNextIntl = createNextIntlPlugin();

/** @type {import('next').NextConfig} */
const nextConfig = {};

module.exports = withNextIntl(nextConfig);

================
File: package.json
================
{
  "name": "dashboard",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "prisma": "rm -rf node_modules/@prisma/client && npx prisma format && npx prisma generate",
    "test": "jest"
  },
  "dependencies": {
    "@internationalized/date": "^3.5.6",
    "@nextui-org/react": "^2.4.0",
    "@prisma/client": "^5.21.1",
    "@react-aria/i18n": "^3.12.3",
    "@tinymce/tinymce-react": "^5.1.1",
    "apexcharts": "^3.35.5",
    "clsx": "^2.0.0",
    "dotenv": "^16.4.5",
    "formidable": "^3.5.1",
    "formik": "^2.4.6",
    "framer-motion": "^10.18.0",
    "jose": "^5.7.0",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.11.3",
    "next": "^14.1.0",
    "next-client-cookies": "^1.1.1",
    "next-intl": "^3.19.0",
    "next-themes": "0.2.1",
    "prisma": "^5.20.0",
    "react": "18.2.0",
    "react-apexcharts": "^1.4.0",
    "react-doc-viewer": "^0.1.14",
    "react-dom": "18.2.0",
    "socket.io": "^4.7.5",
    "socket.io-client": "^4.7.5",
    "sonner": "^1.5.0",
    "yup": "^1.4.0",
    "zustand": "^4.5.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.8",
    "@babel/preset-env": "^7.25.8",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^16.0.1",
    "@testing-library/user-event": "^14.5.2",
    "@types/bcryptjs": "^2.4.6",
    "@types/formidable": "^3.4.5",
    "@types/jest": "^29.5.13",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/node": "^18.7.18",
    "@types/react": "18.0.20",
    "@types/react-dom": "18.0.6",
    "@types/react-draft-wysiwyg": "^1.13.8",
    "@types/socket.io": "^3.0.1",
    "@types/socket.io-client": "^1.4.36",
    "@types/testing-library__jest-dom": "^5.14.9",
    "autoprefixer": "^10.4.15",
    "babel-jest": "^29.7.0",
    "bcryptjs": "^2.4.3",
    "eslint": "8.23.1",
    "eslint-config-next": "13.4.16",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.4.28",
    "tailwindcss": "^3.3.3",
    "ts-jest": "^29.2.5",
    "typescript": "^5.6.3"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# ð§ Under Construction ð§


Hey there! Thanks for checking out our app. We're currently hard at work building some amazing features and improvements to make your experience even better. Please bear with us while we put the finishing touches on everything.

## What to Expect:

- ð§° Exciting new features coming soon!
- ð ï¸ Bug fixes and performance enhancements.
- ð An even more awesome app experience.

We appreciate your patience and can't wait to unveil the new and improved version of our app. Stay tuned!

Thanks for your support! ð

## For Run

Install dependencies

```bash
npm install
```

Start the server

```bash
npm run dev
```

Now you can visit https://localhost:3000 in your browser.

================
File: routing.ts
================
import { createLocalizedPathnamesNavigation } from "next-intl/navigation";
import { defineRouting } from "next-intl/routing";

export const routing = defineRouting({
  locales: ["en", "es"],
  defaultLocale: "en",
  pathnames: {
    "/": "/",
    "/testRelease": {
      en: "/testRelease",
      es: "/testRelease",
    },
    "/version": {
      en: "/version",
      es: "/version",
    },
    "/serviceRequest": {
      en: "/serviceRequest",
      es: "/serviceRequest",
    },
  },
});

export type Pathnames = keyof typeof routing.pathnames;
export type Locale = (typeof routing.locales)[number];

export const { Link, getPathname, redirect, usePathname, useRouter } = createLocalizedPathnamesNavigation(routing);

================
File: setupTests.ts
================
// setupTests.ts
import "@testing-library/jest-dom";

================
File: tailwind.config.js
================
const { nextui } = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",

    // Or if using `src` directory:
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()],
};

================
File: tsconfig.jest.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    // Puedes agregar opciones especÃ­ficas para las pruebas aquÃ­
    "noEmit": true // Ejemplo: no generar archivos de salida
  },
  "include": ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "ESNext",
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "types": ["node"],
    "paths": {
      "@/*": ["./*"]
    }
    // Removido "typeRoots"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "global.d.ts", "jest.config.js"],
  "exclude": ["node_modules"]
}
